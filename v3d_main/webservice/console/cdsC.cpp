/* cdsC.cpp
   Generated by gSOAP 2.8.3 from cdsModHeader.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "cdsH.h"

namespace cds {

SOAP_SOURCE_STAMP("@(#) cdsC.cpp ver 2.8.3 2012-11-29 21:16:07 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_cds_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_cds_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_cds_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_cds_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_cds_fw__entityType:
		return soap_in_fw__entityType(soap, NULL, NULL, "fw:entityType");
	case SOAP_TYPE_cds_fw__entityStatus:
		return soap_in_fw__entityStatus(soap, NULL, NULL, "fw:entityStatus");
	case SOAP_TYPE_cds_fw__user:
		return soap_in_fw__user(soap, NULL, NULL, "fw:user");
	case SOAP_TYPE_cds_fw__entityAttribute:
		return soap_in_fw__entityAttribute(soap, NULL, NULL, "fw:entityAttribute");
	case SOAP_TYPE_cds_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_cds_ns2__longArray:
		return soap_in_ns2__longArray(soap, NULL, NULL, "ns2:longArray");
	case SOAP_TYPE_cds_fw__entityArray:
		return soap_in_fw__entityArray(soap, NULL, NULL, "fw:entityArray");
	case SOAP_TYPE_cds_fw__entityDataArray:
		return soap_in_fw__entityDataArray(soap, NULL, NULL, "fw:entityDataArray");
	case SOAP_TYPE_cds_fw__annotationSession:
		return soap_in_fw__annotationSession(soap, NULL, NULL, "fw:annotationSession");
	case SOAP_TYPE_cds_fw__ontologyAnnotation:
		return soap_in_fw__ontologyAnnotation(soap, NULL, NULL, "fw:ontologyAnnotation");
	case SOAP_TYPE_cds_fw__ontologyKeyBind:
		return soap_in_fw__ontologyKeyBind(soap, NULL, NULL, "fw:ontologyKeyBind");
	case SOAP_TYPE_cds_fw__ontologyKeyBindings:
		return soap_in_fw__ontologyKeyBindings(soap, NULL, NULL, "fw:ontologyKeyBindings");
	case SOAP_TYPE_cds_fw__entity:
		return soap_in_fw__entity(soap, NULL, NULL, "fw:entity");
	case SOAP_TYPE_cds_fw__entityData:
		return soap_in_fw__entityData(soap, NULL, NULL, "fw:entityData");
	case SOAP_TYPE_cds_fw__getParentEntityDataArray:
		return soap_in_fw__getParentEntityDataArray(soap, NULL, NULL, "fw:getParentEntityDataArray");
	case SOAP_TYPE_cds_fw__getParentEntityDataArrayResponse:
		return soap_in_fw__getParentEntityDataArrayResponse(soap, NULL, NULL, "fw:getParentEntityDataArrayResponse");
	case SOAP_TYPE_cds_fw__getParentEntityArray:
		return soap_in_fw__getParentEntityArray(soap, NULL, NULL, "fw:getParentEntityArray");
	case SOAP_TYPE_cds_fw__getParentEntityArrayResponse:
		return soap_in_fw__getParentEntityArrayResponse(soap, NULL, NULL, "fw:getParentEntityArrayResponse");
	case SOAP_TYPE_cds_fw__getKeybindings:
		return soap_in_fw__getKeybindings(soap, NULL, NULL, "fw:getKeybindings");
	case SOAP_TYPE_cds_fw__getKeybindingsResponse:
		return soap_in_fw__getKeybindingsResponse(soap, NULL, NULL, "fw:getKeybindingsResponse");
	case SOAP_TYPE_cds_fw__createAnnotation:
		return soap_in_fw__createAnnotation(soap, NULL, NULL, "fw:createAnnotation");
	case SOAP_TYPE_cds_fw__createAnnotationResponse:
		return soap_in_fw__createAnnotationResponse(soap, NULL, NULL, "fw:createAnnotationResponse");
	case SOAP_TYPE_cds_fw__registerClient:
		return soap_in_fw__registerClient(soap, NULL, NULL, "fw:registerClient");
	case SOAP_TYPE_cds_fw__registerClientResponse:
		return soap_in_fw__registerClientResponse(soap, NULL, NULL, "fw:registerClientResponse");
	case SOAP_TYPE_cds_fw__reservePort:
		return soap_in_fw__reservePort(soap, NULL, NULL, "fw:reservePort");
	case SOAP_TYPE_cds_fw__reservePortResponse:
		return soap_in_fw__reservePortResponse(soap, NULL, NULL, "fw:reservePortResponse");
	case SOAP_TYPE_cds_fw__deselectEntity:
		return soap_in_fw__deselectEntity(soap, NULL, NULL, "fw:deselectEntity");
	case SOAP_TYPE_cds_fw__deselectEntityResponse:
		return soap_in_fw__deselectEntityResponse(soap, NULL, NULL, "fw:deselectEntityResponse");
	case SOAP_TYPE_cds_fw__selectEntity:
		return soap_in_fw__selectEntity(soap, NULL, NULL, "fw:selectEntity");
	case SOAP_TYPE_cds_fw__selectEntityResponse:
		return soap_in_fw__selectEntityResponse(soap, NULL, NULL, "fw:selectEntityResponse");
	case SOAP_TYPE_cds_fw__getUserAnnotationColor:
		return soap_in_fw__getUserAnnotationColor(soap, NULL, NULL, "fw:getUserAnnotationColor");
	case SOAP_TYPE_cds_fw__getUserAnnotationColorResponse:
		return soap_in_fw__getUserAnnotationColorResponse(soap, NULL, NULL, "fw:getUserAnnotationColorResponse");
	case SOAP_TYPE_cds_fw__getAncestorWithType:
		return soap_in_fw__getAncestorWithType(soap, NULL, NULL, "fw:getAncestorWithType");
	case SOAP_TYPE_cds_fw__getAncestorWithTypeResponse:
		return soap_in_fw__getAncestorWithTypeResponse(soap, NULL, NULL, "fw:getAncestorWithTypeResponse");
	case SOAP_TYPE_cds_fw__getAnnotationsForEntities:
		return soap_in_fw__getAnnotationsForEntities(soap, NULL, NULL, "fw:getAnnotationsForEntities");
	case SOAP_TYPE_cds_fw__getAnnotationsForEntitiesResponse:
		return soap_in_fw__getAnnotationsForEntitiesResponse(soap, NULL, NULL, "fw:getAnnotationsForEntitiesResponse");
	case SOAP_TYPE_cds_fw__getAnnotationsForEntity:
		return soap_in_fw__getAnnotationsForEntity(soap, NULL, NULL, "fw:getAnnotationsForEntity");
	case SOAP_TYPE_cds_fw__getAnnotationsForEntityResponse:
		return soap_in_fw__getAnnotationsForEntityResponse(soap, NULL, NULL, "fw:getAnnotationsForEntityResponse");
	case SOAP_TYPE_cds_fw__getEntityTree:
		return soap_in_fw__getEntityTree(soap, NULL, NULL, "fw:getEntityTree");
	case SOAP_TYPE_cds_fw__getEntityTreeResponse:
		return soap_in_fw__getEntityTreeResponse(soap, NULL, NULL, "fw:getEntityTreeResponse");
	case SOAP_TYPE_cds_fw__getEntityAndChildren:
		return soap_in_fw__getEntityAndChildren(soap, NULL, NULL, "fw:getEntityAndChildren");
	case SOAP_TYPE_cds_fw__getEntityAndChildrenResponse:
		return soap_in_fw__getEntityAndChildrenResponse(soap, NULL, NULL, "fw:getEntityAndChildrenResponse");
	case SOAP_TYPE_cds_fw__getAnnotationSession:
		return soap_in_fw__getAnnotationSession(soap, NULL, NULL, "fw:getAnnotationSession");
	case SOAP_TYPE_cds_fw__getAnnotationSessionResponse:
		return soap_in_fw__getAnnotationSessionResponse(soap, NULL, NULL, "fw:getAnnotationSessionResponse");
	case SOAP_TYPE_cds_fw__getOntology:
		return soap_in_fw__getOntology(soap, NULL, NULL, "fw:getOntology");
	case SOAP_TYPE_cds_fw__getOntologyResponse:
		return soap_in_fw__getOntologyResponse(soap, NULL, NULL, "fw:getOntologyResponse");
	case SOAP_TYPE_cds_fw__removeAnnotation:
		return soap_in_fw__removeAnnotation(soap, NULL, NULL, "fw:removeAnnotation");
	case SOAP_TYPE_cds_fw__removeAnnotationResponse:
		return soap_in_fw__removeAnnotationResponse(soap, NULL, NULL, "fw:removeAnnotationResponse");
	case SOAP_TYPE_cds_fw__getEntityById:
		return soap_in_fw__getEntityById(soap, NULL, NULL, "fw:getEntityById");
	case SOAP_TYPE_cds_fw__getEntityByIdResponse:
		return soap_in_fw__getEntityByIdResponse(soap, NULL, NULL, "fw:getEntityByIdResponse");
	case SOAP_TYPE_cds_PointerTofw__entityDataArray:
		return soap_in_PointerTofw__entityDataArray(soap, NULL, NULL, "fw:entityDataArray");
	case SOAP_TYPE_cds_PointerTofw__ontologyKeyBindings:
		return soap_in_PointerTofw__ontologyKeyBindings(soap, NULL, NULL, "fw:ontologyKeyBindings");
	case SOAP_TYPE_cds_PointerTofw__ontologyAnnotation:
		return soap_in_PointerTofw__ontologyAnnotation(soap, NULL, NULL, "fw:ontologyAnnotation");
	case SOAP_TYPE_cds_PointerTons2__longArray:
		return soap_in_PointerTons2__longArray(soap, NULL, NULL, "ns2:longArray");
	case SOAP_TYPE_cds_PointerTofw__entityArray:
		return soap_in_PointerTofw__entityArray(soap, NULL, NULL, "fw:entityArray");
	case SOAP_TYPE_cds_PointerTofw__annotationSession:
		return soap_in_PointerTofw__annotationSession(soap, NULL, NULL, "fw:annotationSession");
	case SOAP_TYPE_cds_PointerTo_fw__ontologyKeyBindings_keyBindingSet:
		return soap_in_PointerTo_fw__ontologyKeyBindings_keyBindingSet(soap, NULL, NULL, "fw:ontologyKeyBindings-keyBindingSet");
	case SOAP_TYPE_cds_PointerTofw__ontologyKeyBind:
		return soap_in_PointerTofw__ontologyKeyBind(soap, NULL, NULL, "fw:ontologyKeyBind");
	case SOAP_TYPE_cds_PointerTo_fw__entity_entityDataSet:
		return soap_in_PointerTo_fw__entity_entityDataSet(soap, NULL, NULL, "fw:entity-entityDataSet");
	case SOAP_TYPE_cds_PointerTofw__entityData:
		return soap_in_PointerTofw__entityData(soap, NULL, NULL, "fw:entityData");
	case SOAP_TYPE_cds_PointerTofw__entityType:
		return soap_in_PointerTofw__entityType(soap, NULL, NULL, "fw:entityType");
	case SOAP_TYPE_cds_PointerTofw__entityStatus:
		return soap_in_PointerTofw__entityStatus(soap, NULL, NULL, "fw:entityStatus");
	case SOAP_TYPE_cds_PointerToLONG64:
		return soap_in_PointerToLONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_cds_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_cds_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_cds_PointerTofw__user:
		return soap_in_PointerTofw__user(soap, NULL, NULL, "fw:user");
	case SOAP_TYPE_cds_PointerTofw__entity:
		return soap_in_PointerTofw__entity(soap, NULL, NULL, "fw:entity");
	case SOAP_TYPE_cds_PointerTofw__entityAttribute:
		return soap_in_PointerTofw__entityAttribute(soap, NULL, NULL, "fw:entityAttribute");
	case SOAP_TYPE_cds__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_cds_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "fw:entityType"))
		{	*type = SOAP_TYPE_cds_fw__entityType;
			return soap_in_fw__entityType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:entityStatus"))
		{	*type = SOAP_TYPE_cds_fw__entityStatus;
			return soap_in_fw__entityStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:user"))
		{	*type = SOAP_TYPE_cds_fw__user;
			return soap_in_fw__user(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:entityAttribute"))
		{	*type = SOAP_TYPE_cds_fw__entityAttribute;
			return soap_in_fw__entityAttribute(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_cds_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:longArray"))
		{	*type = SOAP_TYPE_cds_ns2__longArray;
			return soap_in_ns2__longArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:entityArray"))
		{	*type = SOAP_TYPE_cds_fw__entityArray;
			return soap_in_fw__entityArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:entityDataArray"))
		{	*type = SOAP_TYPE_cds_fw__entityDataArray;
			return soap_in_fw__entityDataArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:annotationSession"))
		{	*type = SOAP_TYPE_cds_fw__annotationSession;
			return soap_in_fw__annotationSession(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:ontologyAnnotation"))
		{	*type = SOAP_TYPE_cds_fw__ontologyAnnotation;
			return soap_in_fw__ontologyAnnotation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:ontologyKeyBind"))
		{	*type = SOAP_TYPE_cds_fw__ontologyKeyBind;
			return soap_in_fw__ontologyKeyBind(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:ontologyKeyBindings"))
		{	*type = SOAP_TYPE_cds_fw__ontologyKeyBindings;
			return soap_in_fw__ontologyKeyBindings(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:entity"))
		{	*type = SOAP_TYPE_cds_fw__entity;
			return soap_in_fw__entity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:entityData"))
		{	*type = SOAP_TYPE_cds_fw__entityData;
			return soap_in_fw__entityData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_cds_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_cds_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_cds_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_cds_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getParentEntityDataArray"))
		{	*type = SOAP_TYPE_cds_fw__getParentEntityDataArray;
			return soap_in_fw__getParentEntityDataArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getParentEntityDataArrayResponse"))
		{	*type = SOAP_TYPE_cds_fw__getParentEntityDataArrayResponse;
			return soap_in_fw__getParentEntityDataArrayResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getParentEntityArray"))
		{	*type = SOAP_TYPE_cds_fw__getParentEntityArray;
			return soap_in_fw__getParentEntityArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getParentEntityArrayResponse"))
		{	*type = SOAP_TYPE_cds_fw__getParentEntityArrayResponse;
			return soap_in_fw__getParentEntityArrayResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getKeybindings"))
		{	*type = SOAP_TYPE_cds_fw__getKeybindings;
			return soap_in_fw__getKeybindings(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getKeybindingsResponse"))
		{	*type = SOAP_TYPE_cds_fw__getKeybindingsResponse;
			return soap_in_fw__getKeybindingsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:createAnnotation"))
		{	*type = SOAP_TYPE_cds_fw__createAnnotation;
			return soap_in_fw__createAnnotation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:createAnnotationResponse"))
		{	*type = SOAP_TYPE_cds_fw__createAnnotationResponse;
			return soap_in_fw__createAnnotationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:registerClient"))
		{	*type = SOAP_TYPE_cds_fw__registerClient;
			return soap_in_fw__registerClient(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:registerClientResponse"))
		{	*type = SOAP_TYPE_cds_fw__registerClientResponse;
			return soap_in_fw__registerClientResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:reservePort"))
		{	*type = SOAP_TYPE_cds_fw__reservePort;
			return soap_in_fw__reservePort(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:reservePortResponse"))
		{	*type = SOAP_TYPE_cds_fw__reservePortResponse;
			return soap_in_fw__reservePortResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:deselectEntity"))
		{	*type = SOAP_TYPE_cds_fw__deselectEntity;
			return soap_in_fw__deselectEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:deselectEntityResponse"))
		{	*type = SOAP_TYPE_cds_fw__deselectEntityResponse;
			return soap_in_fw__deselectEntityResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:selectEntity"))
		{	*type = SOAP_TYPE_cds_fw__selectEntity;
			return soap_in_fw__selectEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:selectEntityResponse"))
		{	*type = SOAP_TYPE_cds_fw__selectEntityResponse;
			return soap_in_fw__selectEntityResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getUserAnnotationColor"))
		{	*type = SOAP_TYPE_cds_fw__getUserAnnotationColor;
			return soap_in_fw__getUserAnnotationColor(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getUserAnnotationColorResponse"))
		{	*type = SOAP_TYPE_cds_fw__getUserAnnotationColorResponse;
			return soap_in_fw__getUserAnnotationColorResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getAncestorWithType"))
		{	*type = SOAP_TYPE_cds_fw__getAncestorWithType;
			return soap_in_fw__getAncestorWithType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getAncestorWithTypeResponse"))
		{	*type = SOAP_TYPE_cds_fw__getAncestorWithTypeResponse;
			return soap_in_fw__getAncestorWithTypeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getAnnotationsForEntities"))
		{	*type = SOAP_TYPE_cds_fw__getAnnotationsForEntities;
			return soap_in_fw__getAnnotationsForEntities(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getAnnotationsForEntitiesResponse"))
		{	*type = SOAP_TYPE_cds_fw__getAnnotationsForEntitiesResponse;
			return soap_in_fw__getAnnotationsForEntitiesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getAnnotationsForEntity"))
		{	*type = SOAP_TYPE_cds_fw__getAnnotationsForEntity;
			return soap_in_fw__getAnnotationsForEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getAnnotationsForEntityResponse"))
		{	*type = SOAP_TYPE_cds_fw__getAnnotationsForEntityResponse;
			return soap_in_fw__getAnnotationsForEntityResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getEntityTree"))
		{	*type = SOAP_TYPE_cds_fw__getEntityTree;
			return soap_in_fw__getEntityTree(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getEntityTreeResponse"))
		{	*type = SOAP_TYPE_cds_fw__getEntityTreeResponse;
			return soap_in_fw__getEntityTreeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getEntityAndChildren"))
		{	*type = SOAP_TYPE_cds_fw__getEntityAndChildren;
			return soap_in_fw__getEntityAndChildren(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getEntityAndChildrenResponse"))
		{	*type = SOAP_TYPE_cds_fw__getEntityAndChildrenResponse;
			return soap_in_fw__getEntityAndChildrenResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getAnnotationSession"))
		{	*type = SOAP_TYPE_cds_fw__getAnnotationSession;
			return soap_in_fw__getAnnotationSession(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getAnnotationSessionResponse"))
		{	*type = SOAP_TYPE_cds_fw__getAnnotationSessionResponse;
			return soap_in_fw__getAnnotationSessionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getOntology"))
		{	*type = SOAP_TYPE_cds_fw__getOntology;
			return soap_in_fw__getOntology(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getOntologyResponse"))
		{	*type = SOAP_TYPE_cds_fw__getOntologyResponse;
			return soap_in_fw__getOntologyResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:removeAnnotation"))
		{	*type = SOAP_TYPE_cds_fw__removeAnnotation;
			return soap_in_fw__removeAnnotation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:removeAnnotationResponse"))
		{	*type = SOAP_TYPE_cds_fw__removeAnnotationResponse;
			return soap_in_fw__removeAnnotationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getEntityById"))
		{	*type = SOAP_TYPE_cds_fw__getEntityById;
			return soap_in_fw__getEntityById(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:getEntityByIdResponse"))
		{	*type = SOAP_TYPE_cds_fw__getEntityByIdResponse;
			return soap_in_fw__getEntityByIdResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE_cds__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_cds_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "fw:ontologyKeyBindings-keyBindingSet"))
		{	*type = SOAP_TYPE_cds__fw__ontologyKeyBindings_keyBindingSet;
			return soap_in__fw__ontologyKeyBindings_keyBindingSet(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "fw:entity-entityDataSet"))
		{	*type = SOAP_TYPE_cds__fw__entity_entityDataSet;
			return soap_in__fw__entity_entityDataSet(soap, NULL, NULL, NULL);
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_cds_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_cds_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_cds_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_cds_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_cds__fw__ontologyKeyBindings_keyBindingSet:
		return ((_fw__ontologyKeyBindings_keyBindingSet *)ptr)->soap_out(soap, "fw:ontologyKeyBindings-keyBindingSet", id, NULL);
	case SOAP_TYPE_cds__fw__entity_entityDataSet:
		return ((_fw__entity_entityDataSet *)ptr)->soap_out(soap, "fw:entity-entityDataSet", id, NULL);
	case SOAP_TYPE_cds_fw__entityType:
		return soap_out_fw__entityType(soap, tag, id, (const std::string *)ptr, "fw:entityType");
	case SOAP_TYPE_cds_fw__entityStatus:
		return soap_out_fw__entityStatus(soap, tag, id, (const std::string *)ptr, "fw:entityStatus");
	case SOAP_TYPE_cds_fw__user:
		return soap_out_fw__user(soap, tag, id, (const std::string *)ptr, "fw:user");
	case SOAP_TYPE_cds_fw__entityAttribute:
		return soap_out_fw__entityAttribute(soap, tag, id, (const std::string *)ptr, "fw:entityAttribute");
	case SOAP_TYPE_cds_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_cds_ns2__longArray:
		return ((ns2__longArray *)ptr)->soap_out(soap, tag, id, "ns2:longArray");
	case SOAP_TYPE_cds_fw__entityArray:
		return ((fw__entityArray *)ptr)->soap_out(soap, tag, id, "fw:entityArray");
	case SOAP_TYPE_cds_fw__entityDataArray:
		return ((fw__entityDataArray *)ptr)->soap_out(soap, tag, id, "fw:entityDataArray");
	case SOAP_TYPE_cds_fw__annotationSession:
		return ((fw__annotationSession *)ptr)->soap_out(soap, tag, id, "fw:annotationSession");
	case SOAP_TYPE_cds_fw__ontologyAnnotation:
		return ((fw__ontologyAnnotation *)ptr)->soap_out(soap, tag, id, "fw:ontologyAnnotation");
	case SOAP_TYPE_cds_fw__ontologyKeyBind:
		return ((fw__ontologyKeyBind *)ptr)->soap_out(soap, tag, id, "fw:ontologyKeyBind");
	case SOAP_TYPE_cds_fw__ontologyKeyBindings:
		return ((fw__ontologyKeyBindings *)ptr)->soap_out(soap, tag, id, "fw:ontologyKeyBindings");
	case SOAP_TYPE_cds_fw__entity:
		return ((fw__entity *)ptr)->soap_out(soap, tag, id, "fw:entity");
	case SOAP_TYPE_cds_fw__entityData:
		return ((fw__entityData *)ptr)->soap_out(soap, tag, id, "fw:entityData");
	case SOAP_TYPE_cds_fw__getParentEntityDataArray:
		return soap_out_fw__getParentEntityDataArray(soap, tag, id, (const struct fw__getParentEntityDataArray *)ptr, "fw:getParentEntityDataArray");
	case SOAP_TYPE_cds_fw__getParentEntityDataArrayResponse:
		return soap_out_fw__getParentEntityDataArrayResponse(soap, tag, id, (const struct fw__getParentEntityDataArrayResponse *)ptr, "fw:getParentEntityDataArrayResponse");
	case SOAP_TYPE_cds_fw__getParentEntityArray:
		return soap_out_fw__getParentEntityArray(soap, tag, id, (const struct fw__getParentEntityArray *)ptr, "fw:getParentEntityArray");
	case SOAP_TYPE_cds_fw__getParentEntityArrayResponse:
		return soap_out_fw__getParentEntityArrayResponse(soap, tag, id, (const struct fw__getParentEntityArrayResponse *)ptr, "fw:getParentEntityArrayResponse");
	case SOAP_TYPE_cds_fw__getKeybindings:
		return soap_out_fw__getKeybindings(soap, tag, id, (const struct fw__getKeybindings *)ptr, "fw:getKeybindings");
	case SOAP_TYPE_cds_fw__getKeybindingsResponse:
		return soap_out_fw__getKeybindingsResponse(soap, tag, id, (const struct fw__getKeybindingsResponse *)ptr, "fw:getKeybindingsResponse");
	case SOAP_TYPE_cds_fw__createAnnotation:
		return soap_out_fw__createAnnotation(soap, tag, id, (const struct fw__createAnnotation *)ptr, "fw:createAnnotation");
	case SOAP_TYPE_cds_fw__createAnnotationResponse:
		return soap_out_fw__createAnnotationResponse(soap, tag, id, (const struct fw__createAnnotationResponse *)ptr, "fw:createAnnotationResponse");
	case SOAP_TYPE_cds_fw__registerClient:
		return soap_out_fw__registerClient(soap, tag, id, (const struct fw__registerClient *)ptr, "fw:registerClient");
	case SOAP_TYPE_cds_fw__registerClientResponse:
		return soap_out_fw__registerClientResponse(soap, tag, id, (const struct fw__registerClientResponse *)ptr, "fw:registerClientResponse");
	case SOAP_TYPE_cds_fw__reservePort:
		return soap_out_fw__reservePort(soap, tag, id, (const struct fw__reservePort *)ptr, "fw:reservePort");
	case SOAP_TYPE_cds_fw__reservePortResponse:
		return soap_out_fw__reservePortResponse(soap, tag, id, (const struct fw__reservePortResponse *)ptr, "fw:reservePortResponse");
	case SOAP_TYPE_cds_fw__deselectEntity:
		return soap_out_fw__deselectEntity(soap, tag, id, (const struct fw__deselectEntity *)ptr, "fw:deselectEntity");
	case SOAP_TYPE_cds_fw__deselectEntityResponse:
		return soap_out_fw__deselectEntityResponse(soap, tag, id, (const struct fw__deselectEntityResponse *)ptr, "fw:deselectEntityResponse");
	case SOAP_TYPE_cds_fw__selectEntity:
		return soap_out_fw__selectEntity(soap, tag, id, (const struct fw__selectEntity *)ptr, "fw:selectEntity");
	case SOAP_TYPE_cds_fw__selectEntityResponse:
		return soap_out_fw__selectEntityResponse(soap, tag, id, (const struct fw__selectEntityResponse *)ptr, "fw:selectEntityResponse");
	case SOAP_TYPE_cds_fw__getUserAnnotationColor:
		return soap_out_fw__getUserAnnotationColor(soap, tag, id, (const struct fw__getUserAnnotationColor *)ptr, "fw:getUserAnnotationColor");
	case SOAP_TYPE_cds_fw__getUserAnnotationColorResponse:
		return soap_out_fw__getUserAnnotationColorResponse(soap, tag, id, (const struct fw__getUserAnnotationColorResponse *)ptr, "fw:getUserAnnotationColorResponse");
	case SOAP_TYPE_cds_fw__getAncestorWithType:
		return soap_out_fw__getAncestorWithType(soap, tag, id, (const struct fw__getAncestorWithType *)ptr, "fw:getAncestorWithType");
	case SOAP_TYPE_cds_fw__getAncestorWithTypeResponse:
		return soap_out_fw__getAncestorWithTypeResponse(soap, tag, id, (const struct fw__getAncestorWithTypeResponse *)ptr, "fw:getAncestorWithTypeResponse");
	case SOAP_TYPE_cds_fw__getAnnotationsForEntities:
		return soap_out_fw__getAnnotationsForEntities(soap, tag, id, (const struct fw__getAnnotationsForEntities *)ptr, "fw:getAnnotationsForEntities");
	case SOAP_TYPE_cds_fw__getAnnotationsForEntitiesResponse:
		return soap_out_fw__getAnnotationsForEntitiesResponse(soap, tag, id, (const struct fw__getAnnotationsForEntitiesResponse *)ptr, "fw:getAnnotationsForEntitiesResponse");
	case SOAP_TYPE_cds_fw__getAnnotationsForEntity:
		return soap_out_fw__getAnnotationsForEntity(soap, tag, id, (const struct fw__getAnnotationsForEntity *)ptr, "fw:getAnnotationsForEntity");
	case SOAP_TYPE_cds_fw__getAnnotationsForEntityResponse:
		return soap_out_fw__getAnnotationsForEntityResponse(soap, tag, id, (const struct fw__getAnnotationsForEntityResponse *)ptr, "fw:getAnnotationsForEntityResponse");
	case SOAP_TYPE_cds_fw__getEntityTree:
		return soap_out_fw__getEntityTree(soap, tag, id, (const struct fw__getEntityTree *)ptr, "fw:getEntityTree");
	case SOAP_TYPE_cds_fw__getEntityTreeResponse:
		return soap_out_fw__getEntityTreeResponse(soap, tag, id, (const struct fw__getEntityTreeResponse *)ptr, "fw:getEntityTreeResponse");
	case SOAP_TYPE_cds_fw__getEntityAndChildren:
		return soap_out_fw__getEntityAndChildren(soap, tag, id, (const struct fw__getEntityAndChildren *)ptr, "fw:getEntityAndChildren");
	case SOAP_TYPE_cds_fw__getEntityAndChildrenResponse:
		return soap_out_fw__getEntityAndChildrenResponse(soap, tag, id, (const struct fw__getEntityAndChildrenResponse *)ptr, "fw:getEntityAndChildrenResponse");
	case SOAP_TYPE_cds_fw__getAnnotationSession:
		return soap_out_fw__getAnnotationSession(soap, tag, id, (const struct fw__getAnnotationSession *)ptr, "fw:getAnnotationSession");
	case SOAP_TYPE_cds_fw__getAnnotationSessionResponse:
		return soap_out_fw__getAnnotationSessionResponse(soap, tag, id, (const struct fw__getAnnotationSessionResponse *)ptr, "fw:getAnnotationSessionResponse");
	case SOAP_TYPE_cds_fw__getOntology:
		return soap_out_fw__getOntology(soap, tag, id, (const struct fw__getOntology *)ptr, "fw:getOntology");
	case SOAP_TYPE_cds_fw__getOntologyResponse:
		return soap_out_fw__getOntologyResponse(soap, tag, id, (const struct fw__getOntologyResponse *)ptr, "fw:getOntologyResponse");
	case SOAP_TYPE_cds_fw__removeAnnotation:
		return soap_out_fw__removeAnnotation(soap, tag, id, (const struct fw__removeAnnotation *)ptr, "fw:removeAnnotation");
	case SOAP_TYPE_cds_fw__removeAnnotationResponse:
		return soap_out_fw__removeAnnotationResponse(soap, tag, id, (const struct fw__removeAnnotationResponse *)ptr, "fw:removeAnnotationResponse");
	case SOAP_TYPE_cds_fw__getEntityById:
		return soap_out_fw__getEntityById(soap, tag, id, (const struct fw__getEntityById *)ptr, "fw:getEntityById");
	case SOAP_TYPE_cds_fw__getEntityByIdResponse:
		return soap_out_fw__getEntityByIdResponse(soap, tag, id, (const struct fw__getEntityByIdResponse *)ptr, "fw:getEntityByIdResponse");
	case SOAP_TYPE_cds_PointerTofw__entityDataArray:
		return soap_out_PointerTofw__entityDataArray(soap, tag, id, (fw__entityDataArray *const*)ptr, "fw:entityDataArray");
	case SOAP_TYPE_cds_PointerTofw__ontologyKeyBindings:
		return soap_out_PointerTofw__ontologyKeyBindings(soap, tag, id, (fw__ontologyKeyBindings *const*)ptr, "fw:ontologyKeyBindings");
	case SOAP_TYPE_cds_PointerTofw__ontologyAnnotation:
		return soap_out_PointerTofw__ontologyAnnotation(soap, tag, id, (fw__ontologyAnnotation *const*)ptr, "fw:ontologyAnnotation");
	case SOAP_TYPE_cds_PointerTons2__longArray:
		return soap_out_PointerTons2__longArray(soap, tag, id, (ns2__longArray *const*)ptr, "ns2:longArray");
	case SOAP_TYPE_cds_PointerTofw__entityArray:
		return soap_out_PointerTofw__entityArray(soap, tag, id, (fw__entityArray *const*)ptr, "fw:entityArray");
	case SOAP_TYPE_cds_PointerTofw__annotationSession:
		return soap_out_PointerTofw__annotationSession(soap, tag, id, (fw__annotationSession *const*)ptr, "fw:annotationSession");
	case SOAP_TYPE_cds_PointerTo_fw__ontologyKeyBindings_keyBindingSet:
		return soap_out_PointerTo_fw__ontologyKeyBindings_keyBindingSet(soap, tag, id, (_fw__ontologyKeyBindings_keyBindingSet *const*)ptr, "fw:ontologyKeyBindings-keyBindingSet");
	case SOAP_TYPE_cds_PointerTofw__ontologyKeyBind:
		return soap_out_PointerTofw__ontologyKeyBind(soap, tag, id, (fw__ontologyKeyBind *const*)ptr, "fw:ontologyKeyBind");
	case SOAP_TYPE_cds_PointerTo_fw__entity_entityDataSet:
		return soap_out_PointerTo_fw__entity_entityDataSet(soap, tag, id, (_fw__entity_entityDataSet *const*)ptr, "fw:entity-entityDataSet");
	case SOAP_TYPE_cds_PointerTofw__entityData:
		return soap_out_PointerTofw__entityData(soap, tag, id, (fw__entityData *const*)ptr, "fw:entityData");
	case SOAP_TYPE_cds_PointerTofw__entityType:
		return soap_out_PointerTofw__entityType(soap, tag, id, (std::string *const*)ptr, "fw:entityType");
	case SOAP_TYPE_cds_PointerTofw__entityStatus:
		return soap_out_PointerTofw__entityStatus(soap, tag, id, (std::string *const*)ptr, "fw:entityStatus");
	case SOAP_TYPE_cds_PointerToLONG64:
		return soap_out_PointerToLONG64(soap, tag, id, (LONG64 *const*)ptr, "xsd:long");
	case SOAP_TYPE_cds_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_cds_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_cds_PointerTofw__user:
		return soap_out_PointerTofw__user(soap, tag, id, (std::string *const*)ptr, "fw:user");
	case SOAP_TYPE_cds_PointerTofw__entity:
		return soap_out_PointerTofw__entity(soap, tag, id, (fw__entity *const*)ptr, "fw:entity");
	case SOAP_TYPE_cds_PointerTofw__entityAttribute:
		return soap_out_PointerTofw__entityAttribute(soap, tag, id, (std::string *const*)ptr, "fw:entityAttribute");
	case SOAP_TYPE_cds__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_cds_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_cds__fw__ontologyKeyBindings_keyBindingSet:
		((_fw__ontologyKeyBindings_keyBindingSet *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cds__fw__entity_entityDataSet:
		((_fw__entity_entityDataSet *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cds_fw__entityType:
		soap_serialize_fw__entityType(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_cds_fw__entityStatus:
		soap_serialize_fw__entityStatus(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_cds_fw__user:
		soap_serialize_fw__user(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_cds_fw__entityAttribute:
		soap_serialize_fw__entityAttribute(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_cds_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_cds_ns2__longArray:
		((ns2__longArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cds_fw__entityArray:
		((fw__entityArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cds_fw__entityDataArray:
		((fw__entityDataArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cds_fw__annotationSession:
		((fw__annotationSession *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cds_fw__ontologyAnnotation:
		((fw__ontologyAnnotation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cds_fw__ontologyKeyBind:
		((fw__ontologyKeyBind *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cds_fw__ontologyKeyBindings:
		((fw__ontologyKeyBindings *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cds_fw__entity:
		((fw__entity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cds_fw__entityData:
		((fw__entityData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_cds_fw__getParentEntityDataArray:
		soap_serialize_fw__getParentEntityDataArray(soap, (const struct fw__getParentEntityDataArray *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getParentEntityDataArrayResponse:
		soap_serialize_fw__getParentEntityDataArrayResponse(soap, (const struct fw__getParentEntityDataArrayResponse *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getParentEntityArray:
		soap_serialize_fw__getParentEntityArray(soap, (const struct fw__getParentEntityArray *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getParentEntityArrayResponse:
		soap_serialize_fw__getParentEntityArrayResponse(soap, (const struct fw__getParentEntityArrayResponse *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getKeybindings:
		soap_serialize_fw__getKeybindings(soap, (const struct fw__getKeybindings *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getKeybindingsResponse:
		soap_serialize_fw__getKeybindingsResponse(soap, (const struct fw__getKeybindingsResponse *)ptr);
		break;
	case SOAP_TYPE_cds_fw__createAnnotation:
		soap_serialize_fw__createAnnotation(soap, (const struct fw__createAnnotation *)ptr);
		break;
	case SOAP_TYPE_cds_fw__createAnnotationResponse:
		soap_serialize_fw__createAnnotationResponse(soap, (const struct fw__createAnnotationResponse *)ptr);
		break;
	case SOAP_TYPE_cds_fw__registerClient:
		soap_serialize_fw__registerClient(soap, (const struct fw__registerClient *)ptr);
		break;
	case SOAP_TYPE_cds_fw__registerClientResponse:
		soap_serialize_fw__registerClientResponse(soap, (const struct fw__registerClientResponse *)ptr);
		break;
	case SOAP_TYPE_cds_fw__reservePort:
		soap_serialize_fw__reservePort(soap, (const struct fw__reservePort *)ptr);
		break;
	case SOAP_TYPE_cds_fw__reservePortResponse:
		soap_serialize_fw__reservePortResponse(soap, (const struct fw__reservePortResponse *)ptr);
		break;
	case SOAP_TYPE_cds_fw__deselectEntity:
		soap_serialize_fw__deselectEntity(soap, (const struct fw__deselectEntity *)ptr);
		break;
	case SOAP_TYPE_cds_fw__deselectEntityResponse:
		soap_serialize_fw__deselectEntityResponse(soap, (const struct fw__deselectEntityResponse *)ptr);
		break;
	case SOAP_TYPE_cds_fw__selectEntity:
		soap_serialize_fw__selectEntity(soap, (const struct fw__selectEntity *)ptr);
		break;
	case SOAP_TYPE_cds_fw__selectEntityResponse:
		soap_serialize_fw__selectEntityResponse(soap, (const struct fw__selectEntityResponse *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getUserAnnotationColor:
		soap_serialize_fw__getUserAnnotationColor(soap, (const struct fw__getUserAnnotationColor *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getUserAnnotationColorResponse:
		soap_serialize_fw__getUserAnnotationColorResponse(soap, (const struct fw__getUserAnnotationColorResponse *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getAncestorWithType:
		soap_serialize_fw__getAncestorWithType(soap, (const struct fw__getAncestorWithType *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getAncestorWithTypeResponse:
		soap_serialize_fw__getAncestorWithTypeResponse(soap, (const struct fw__getAncestorWithTypeResponse *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getAnnotationsForEntities:
		soap_serialize_fw__getAnnotationsForEntities(soap, (const struct fw__getAnnotationsForEntities *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getAnnotationsForEntitiesResponse:
		soap_serialize_fw__getAnnotationsForEntitiesResponse(soap, (const struct fw__getAnnotationsForEntitiesResponse *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getAnnotationsForEntity:
		soap_serialize_fw__getAnnotationsForEntity(soap, (const struct fw__getAnnotationsForEntity *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getAnnotationsForEntityResponse:
		soap_serialize_fw__getAnnotationsForEntityResponse(soap, (const struct fw__getAnnotationsForEntityResponse *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getEntityTree:
		soap_serialize_fw__getEntityTree(soap, (const struct fw__getEntityTree *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getEntityTreeResponse:
		soap_serialize_fw__getEntityTreeResponse(soap, (const struct fw__getEntityTreeResponse *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getEntityAndChildren:
		soap_serialize_fw__getEntityAndChildren(soap, (const struct fw__getEntityAndChildren *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getEntityAndChildrenResponse:
		soap_serialize_fw__getEntityAndChildrenResponse(soap, (const struct fw__getEntityAndChildrenResponse *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getAnnotationSession:
		soap_serialize_fw__getAnnotationSession(soap, (const struct fw__getAnnotationSession *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getAnnotationSessionResponse:
		soap_serialize_fw__getAnnotationSessionResponse(soap, (const struct fw__getAnnotationSessionResponse *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getOntology:
		soap_serialize_fw__getOntology(soap, (const struct fw__getOntology *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getOntologyResponse:
		soap_serialize_fw__getOntologyResponse(soap, (const struct fw__getOntologyResponse *)ptr);
		break;
	case SOAP_TYPE_cds_fw__removeAnnotation:
		soap_serialize_fw__removeAnnotation(soap, (const struct fw__removeAnnotation *)ptr);
		break;
	case SOAP_TYPE_cds_fw__removeAnnotationResponse:
		soap_serialize_fw__removeAnnotationResponse(soap, (const struct fw__removeAnnotationResponse *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getEntityById:
		soap_serialize_fw__getEntityById(soap, (const struct fw__getEntityById *)ptr);
		break;
	case SOAP_TYPE_cds_fw__getEntityByIdResponse:
		soap_serialize_fw__getEntityByIdResponse(soap, (const struct fw__getEntityByIdResponse *)ptr);
		break;
	case SOAP_TYPE_cds_PointerTofw__entityDataArray:
		soap_serialize_PointerTofw__entityDataArray(soap, (fw__entityDataArray *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerTofw__ontologyKeyBindings:
		soap_serialize_PointerTofw__ontologyKeyBindings(soap, (fw__ontologyKeyBindings *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerTofw__ontologyAnnotation:
		soap_serialize_PointerTofw__ontologyAnnotation(soap, (fw__ontologyAnnotation *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerTons2__longArray:
		soap_serialize_PointerTons2__longArray(soap, (ns2__longArray *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerTofw__entityArray:
		soap_serialize_PointerTofw__entityArray(soap, (fw__entityArray *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerTofw__annotationSession:
		soap_serialize_PointerTofw__annotationSession(soap, (fw__annotationSession *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerTo_fw__ontologyKeyBindings_keyBindingSet:
		soap_serialize_PointerTo_fw__ontologyKeyBindings_keyBindingSet(soap, (_fw__ontologyKeyBindings_keyBindingSet *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerTofw__ontologyKeyBind:
		soap_serialize_PointerTofw__ontologyKeyBind(soap, (fw__ontologyKeyBind *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerTo_fw__entity_entityDataSet:
		soap_serialize_PointerTo_fw__entity_entityDataSet(soap, (_fw__entity_entityDataSet *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerTofw__entityData:
		soap_serialize_PointerTofw__entityData(soap, (fw__entityData *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerTofw__entityType:
		soap_serialize_PointerTofw__entityType(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerTofw__entityStatus:
		soap_serialize_PointerTofw__entityStatus(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerToLONG64:
		soap_serialize_PointerToLONG64(soap, (LONG64 *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerTofw__user:
		soap_serialize_PointerTofw__user(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerTofw__entity:
		soap_serialize_PointerTofw__entity(soap, (fw__entity *const*)ptr);
		break;
	case SOAP_TYPE_cds_PointerTofw__entityAttribute:
		soap_serialize_PointerTofw__entityAttribute(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_cds__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_cds_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 cds_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_cds_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__entityData:
		return (void*)soap_instantiate_fw__entityData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds__fw__entity_entityDataSet:
		return (void*)soap_instantiate__fw__entity_entityDataSet(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__entity:
		return (void*)soap_instantiate_fw__entity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds__fw__ontologyKeyBindings_keyBindingSet:
		return (void*)soap_instantiate__fw__ontologyKeyBindings_keyBindingSet(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__ontologyKeyBindings:
		return (void*)soap_instantiate_fw__ontologyKeyBindings(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__ontologyKeyBind:
		return (void*)soap_instantiate_fw__ontologyKeyBind(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__ontologyAnnotation:
		return (void*)soap_instantiate_fw__ontologyAnnotation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__annotationSession:
		return (void*)soap_instantiate_fw__annotationSession(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__entityDataArray:
		return (void*)soap_instantiate_fw__entityDataArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__entityArray:
		return (void*)soap_instantiate_fw__entityArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_ns2__longArray:
		return (void*)soap_instantiate_ns2__longArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getEntityByIdResponse:
		return (void*)soap_instantiate_fw__getEntityByIdResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getEntityById:
		return (void*)soap_instantiate_fw__getEntityById(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__removeAnnotationResponse:
		return (void*)soap_instantiate_fw__removeAnnotationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__removeAnnotation:
		return (void*)soap_instantiate_fw__removeAnnotation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getOntologyResponse:
		return (void*)soap_instantiate_fw__getOntologyResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getOntology:
		return (void*)soap_instantiate_fw__getOntology(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getAnnotationSessionResponse:
		return (void*)soap_instantiate_fw__getAnnotationSessionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getAnnotationSession:
		return (void*)soap_instantiate_fw__getAnnotationSession(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getEntityAndChildrenResponse:
		return (void*)soap_instantiate_fw__getEntityAndChildrenResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getEntityAndChildren:
		return (void*)soap_instantiate_fw__getEntityAndChildren(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getEntityTreeResponse:
		return (void*)soap_instantiate_fw__getEntityTreeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getEntityTree:
		return (void*)soap_instantiate_fw__getEntityTree(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getAnnotationsForEntityResponse:
		return (void*)soap_instantiate_fw__getAnnotationsForEntityResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getAnnotationsForEntity:
		return (void*)soap_instantiate_fw__getAnnotationsForEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getAnnotationsForEntitiesResponse:
		return (void*)soap_instantiate_fw__getAnnotationsForEntitiesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getAnnotationsForEntities:
		return (void*)soap_instantiate_fw__getAnnotationsForEntities(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getAncestorWithTypeResponse:
		return (void*)soap_instantiate_fw__getAncestorWithTypeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getAncestorWithType:
		return (void*)soap_instantiate_fw__getAncestorWithType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getUserAnnotationColorResponse:
		return (void*)soap_instantiate_fw__getUserAnnotationColorResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getUserAnnotationColor:
		return (void*)soap_instantiate_fw__getUserAnnotationColor(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__selectEntityResponse:
		return (void*)soap_instantiate_fw__selectEntityResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__selectEntity:
		return (void*)soap_instantiate_fw__selectEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__deselectEntityResponse:
		return (void*)soap_instantiate_fw__deselectEntityResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__deselectEntity:
		return (void*)soap_instantiate_fw__deselectEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__reservePortResponse:
		return (void*)soap_instantiate_fw__reservePortResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__reservePort:
		return (void*)soap_instantiate_fw__reservePort(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__registerClientResponse:
		return (void*)soap_instantiate_fw__registerClientResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__registerClient:
		return (void*)soap_instantiate_fw__registerClient(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__createAnnotationResponse:
		return (void*)soap_instantiate_fw__createAnnotationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__createAnnotation:
		return (void*)soap_instantiate_fw__createAnnotation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getKeybindingsResponse:
		return (void*)soap_instantiate_fw__getKeybindingsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getKeybindings:
		return (void*)soap_instantiate_fw__getKeybindings(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getParentEntityArrayResponse:
		return (void*)soap_instantiate_fw__getParentEntityArrayResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getParentEntityArray:
		return (void*)soap_instantiate_fw__getParentEntityArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getParentEntityDataArrayResponse:
		return (void*)soap_instantiate_fw__getParentEntityDataArrayResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__getParentEntityDataArray:
		return (void*)soap_instantiate_fw__getParentEntityDataArray(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_cds_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_cds_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_cds_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_cds_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_cds_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_cds_fw__entityAttribute:
		return (void*)soap_instantiate_fw__entityAttribute(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__user:
		return (void*)soap_instantiate_fw__user(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__entityStatus:
		return (void*)soap_instantiate_fw__entityStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_fw__entityType:
		return (void*)soap_instantiate_fw__entityType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_std__vectorTemplateOfLONG64:
		return (void*)soap_instantiate_std__vectorTemplateOfLONG64(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_std__vectorTemplateOfPointerTofw__entity:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTofw__entity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_std__vectorTemplateOfPointerTofw__ontologyKeyBind:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTofw__ontologyKeyBind(soap, -1, type, arrayType, n);
	case SOAP_TYPE_cds_std__vectorTemplateOfPointerTofw__entityData:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTofw__entityData(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 cds_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_cds_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__entityData:
		if (p->size < 0)
			SOAP_DELETE((fw__entityData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((fw__entityData*)p->ptr);
		break;
	case SOAP_TYPE_cds__fw__entity_entityDataSet:
		if (p->size < 0)
			SOAP_DELETE((_fw__entity_entityDataSet*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_fw__entity_entityDataSet*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__entity:
		if (p->size < 0)
			SOAP_DELETE((fw__entity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((fw__entity*)p->ptr);
		break;
	case SOAP_TYPE_cds__fw__ontologyKeyBindings_keyBindingSet:
		if (p->size < 0)
			SOAP_DELETE((_fw__ontologyKeyBindings_keyBindingSet*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_fw__ontologyKeyBindings_keyBindingSet*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__ontologyKeyBindings:
		if (p->size < 0)
			SOAP_DELETE((fw__ontologyKeyBindings*)p->ptr);
		else
			SOAP_DELETE_ARRAY((fw__ontologyKeyBindings*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__ontologyKeyBind:
		if (p->size < 0)
			SOAP_DELETE((fw__ontologyKeyBind*)p->ptr);
		else
			SOAP_DELETE_ARRAY((fw__ontologyKeyBind*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__ontologyAnnotation:
		if (p->size < 0)
			SOAP_DELETE((fw__ontologyAnnotation*)p->ptr);
		else
			SOAP_DELETE_ARRAY((fw__ontologyAnnotation*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__annotationSession:
		if (p->size < 0)
			SOAP_DELETE((fw__annotationSession*)p->ptr);
		else
			SOAP_DELETE_ARRAY((fw__annotationSession*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__entityDataArray:
		if (p->size < 0)
			SOAP_DELETE((fw__entityDataArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((fw__entityDataArray*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__entityArray:
		if (p->size < 0)
			SOAP_DELETE((fw__entityArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((fw__entityArray*)p->ptr);
		break;
	case SOAP_TYPE_cds_ns2__longArray:
		if (p->size < 0)
			SOAP_DELETE((ns2__longArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns2__longArray*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getEntityByIdResponse:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getEntityByIdResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getEntityByIdResponse*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getEntityById:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getEntityById*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getEntityById*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__removeAnnotationResponse:
		if (p->size < 0)
			SOAP_DELETE((struct fw__removeAnnotationResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__removeAnnotationResponse*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__removeAnnotation:
		if (p->size < 0)
			SOAP_DELETE((struct fw__removeAnnotation*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__removeAnnotation*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getOntologyResponse:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getOntologyResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getOntologyResponse*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getOntology:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getOntology*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getOntology*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getAnnotationSessionResponse:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getAnnotationSessionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getAnnotationSessionResponse*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getAnnotationSession:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getAnnotationSession*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getAnnotationSession*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getEntityAndChildrenResponse:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getEntityAndChildrenResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getEntityAndChildrenResponse*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getEntityAndChildren:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getEntityAndChildren*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getEntityAndChildren*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getEntityTreeResponse:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getEntityTreeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getEntityTreeResponse*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getEntityTree:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getEntityTree*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getEntityTree*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getAnnotationsForEntityResponse:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getAnnotationsForEntityResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getAnnotationsForEntityResponse*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getAnnotationsForEntity:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getAnnotationsForEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getAnnotationsForEntity*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getAnnotationsForEntitiesResponse:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getAnnotationsForEntitiesResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getAnnotationsForEntitiesResponse*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getAnnotationsForEntities:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getAnnotationsForEntities*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getAnnotationsForEntities*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getAncestorWithTypeResponse:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getAncestorWithTypeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getAncestorWithTypeResponse*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getAncestorWithType:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getAncestorWithType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getAncestorWithType*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getUserAnnotationColorResponse:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getUserAnnotationColorResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getUserAnnotationColorResponse*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getUserAnnotationColor:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getUserAnnotationColor*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getUserAnnotationColor*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__selectEntityResponse:
		if (p->size < 0)
			SOAP_DELETE((struct fw__selectEntityResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__selectEntityResponse*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__selectEntity:
		if (p->size < 0)
			SOAP_DELETE((struct fw__selectEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__selectEntity*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__deselectEntityResponse:
		if (p->size < 0)
			SOAP_DELETE((struct fw__deselectEntityResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__deselectEntityResponse*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__deselectEntity:
		if (p->size < 0)
			SOAP_DELETE((struct fw__deselectEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__deselectEntity*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__reservePortResponse:
		if (p->size < 0)
			SOAP_DELETE((struct fw__reservePortResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__reservePortResponse*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__reservePort:
		if (p->size < 0)
			SOAP_DELETE((struct fw__reservePort*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__reservePort*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__registerClientResponse:
		if (p->size < 0)
			SOAP_DELETE((struct fw__registerClientResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__registerClientResponse*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__registerClient:
		if (p->size < 0)
			SOAP_DELETE((struct fw__registerClient*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__registerClient*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__createAnnotationResponse:
		if (p->size < 0)
			SOAP_DELETE((struct fw__createAnnotationResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__createAnnotationResponse*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__createAnnotation:
		if (p->size < 0)
			SOAP_DELETE((struct fw__createAnnotation*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__createAnnotation*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getKeybindingsResponse:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getKeybindingsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getKeybindingsResponse*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getKeybindings:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getKeybindings*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getKeybindings*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getParentEntityArrayResponse:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getParentEntityArrayResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getParentEntityArrayResponse*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getParentEntityArray:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getParentEntityArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getParentEntityArray*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getParentEntityDataArrayResponse:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getParentEntityDataArrayResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getParentEntityDataArrayResponse*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__getParentEntityDataArray:
		if (p->size < 0)
			SOAP_DELETE((struct fw__getParentEntityDataArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct fw__getParentEntityDataArray*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_cds_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_cds_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_cds_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_cds_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_cds_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_cds_fw__entityAttribute:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__user:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__entityStatus:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_cds_fw__entityType:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_cds_std__vectorTemplateOfLONG64:
		if (p->size < 0)
			SOAP_DELETE((std::vector<LONG64 >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<LONG64 >*)p->ptr);
		break;
	case SOAP_TYPE_cds_std__vectorTemplateOfPointerTofw__entity:
		if (p->size < 0)
			SOAP_DELETE((std::vector<fw__entity * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<fw__entity * >*)p->ptr);
		break;
	case SOAP_TYPE_cds_std__vectorTemplateOfPointerTofw__ontologyKeyBind:
		if (p->size < 0)
			SOAP_DELETE((std::vector<fw__ontologyKeyBind * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<fw__ontologyKeyBind * >*)p->ptr);
		break;
	case SOAP_TYPE_cds_std__vectorTemplateOfPointerTofw__entityData:
		if (p->size < 0)
			SOAP_DELETE((std::vector<fw__entityData * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<fw__entityData * >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, cds_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, cds_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 cds_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_cds_std__vectorTemplateOfLONG64:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container cds_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<LONG64 >*)p)[len] = *(LONG64 *)q;
		break;
	case SOAP_TYPE_cds_std__vectorTemplateOfPointerTofw__entity:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container cds_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<fw__entity * >*)p)[len] = *(fw__entity **)q;
		break;
	case SOAP_TYPE_cds_std__vectorTemplateOfPointerTofw__ontologyKeyBind:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container cds_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<fw__ontologyKeyBind * >*)p)[len] = *(fw__ontologyKeyBind **)q;
		break;
	case SOAP_TYPE_cds_std__vectorTemplateOfPointerTofw__entityData:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container cds_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<fw__entityData * >*)p)[len] = *(fw__entityData **)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_cds_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_cds_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_cds_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_cds_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_cds_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{	LONG64 *p;
	p = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_cds_LONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_LONG64);
	if (soap_out_LONG64(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _fw__ontologyKeyBindings_keyBindingSet::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfPointerTofw__ontologyKeyBind(soap, &this->_fw__ontologyKeyBindings_keyBindingSet::keyBinding);
}

void _fw__ontologyKeyBindings_keyBindingSet::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTofw__ontologyKeyBind(soap, &this->_fw__ontologyKeyBindings_keyBindingSet::keyBinding);
}

int _fw__ontologyKeyBindings_keyBindingSet::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__fw__ontologyKeyBindings_keyBindingSet(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fw__ontologyKeyBindings_keyBindingSet(struct soap *soap, const char *tag, int id, const _fw__ontologyKeyBindings_keyBindingSet *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds__fw__ontologyKeyBindings_keyBindingSet), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTofw__ontologyKeyBind(soap, "keyBinding", -1, &(a->_fw__ontologyKeyBindings_keyBindingSet::keyBinding), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_fw__ontologyKeyBindings_keyBindingSet::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__fw__ontologyKeyBindings_keyBindingSet(soap, tag, this, type);
}

SOAP_FMAC3 _fw__ontologyKeyBindings_keyBindingSet * SOAP_FMAC4 soap_in__fw__ontologyKeyBindings_keyBindingSet(struct soap *soap, const char *tag, _fw__ontologyKeyBindings_keyBindingSet *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_fw__ontologyKeyBindings_keyBindingSet *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cds__fw__ontologyKeyBindings_keyBindingSet, sizeof(_fw__ontologyKeyBindings_keyBindingSet), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cds__fw__ontologyKeyBindings_keyBindingSet)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_fw__ontologyKeyBindings_keyBindingSet *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTofw__ontologyKeyBind(soap, "keyBinding", &(a->_fw__ontologyKeyBindings_keyBindingSet::keyBinding), "fw:ontologyKeyBind"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_fw__ontologyKeyBindings_keyBindingSet *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds__fw__ontologyKeyBindings_keyBindingSet, 0, sizeof(_fw__ontologyKeyBindings_keyBindingSet), 0, soap_copy__fw__ontologyKeyBindings_keyBindingSet);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _fw__ontologyKeyBindings_keyBindingSet::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cds__fw__ontologyKeyBindings_keyBindingSet);
	if (this->soap_out(soap, tag?tag:"fw:ontologyKeyBindings-keyBindingSet", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_fw__ontologyKeyBindings_keyBindingSet::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__fw__ontologyKeyBindings_keyBindingSet(soap, this, tag, type);
}

SOAP_FMAC3 _fw__ontologyKeyBindings_keyBindingSet * SOAP_FMAC4 soap_get__fw__ontologyKeyBindings_keyBindingSet(struct soap *soap, _fw__ontologyKeyBindings_keyBindingSet *p, const char *tag, const char *type)
{
	if ((p = soap_in__fw__ontologyKeyBindings_keyBindingSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _fw__ontologyKeyBindings_keyBindingSet * SOAP_FMAC2 soap_instantiate__fw__ontologyKeyBindings_keyBindingSet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__fw__ontologyKeyBindings_keyBindingSet(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds__fw__ontologyKeyBindings_keyBindingSet, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_fw__ontologyKeyBindings_keyBindingSet);
		if (size)
			*size = sizeof(_fw__ontologyKeyBindings_keyBindingSet);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_fw__ontologyKeyBindings_keyBindingSet[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_fw__ontologyKeyBindings_keyBindingSet);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_fw__ontologyKeyBindings_keyBindingSet*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fw__ontologyKeyBindings_keyBindingSet(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _fw__ontologyKeyBindings_keyBindingSet %p -> %p\n", q, p));
	*(_fw__ontologyKeyBindings_keyBindingSet*)p = *(_fw__ontologyKeyBindings_keyBindingSet*)q;
}

void _fw__entity_entityDataSet::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfPointerTofw__entityData(soap, &this->_fw__entity_entityDataSet::entityData);
}

void _fw__entity_entityDataSet::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTofw__entityData(soap, &this->_fw__entity_entityDataSet::entityData);
}

int _fw__entity_entityDataSet::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__fw__entity_entityDataSet(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fw__entity_entityDataSet(struct soap *soap, const char *tag, int id, const _fw__entity_entityDataSet *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds__fw__entity_entityDataSet), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTofw__entityData(soap, "entityData", -1, &(a->_fw__entity_entityDataSet::entityData), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_fw__entity_entityDataSet::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__fw__entity_entityDataSet(soap, tag, this, type);
}

SOAP_FMAC3 _fw__entity_entityDataSet * SOAP_FMAC4 soap_in__fw__entity_entityDataSet(struct soap *soap, const char *tag, _fw__entity_entityDataSet *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_fw__entity_entityDataSet *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cds__fw__entity_entityDataSet, sizeof(_fw__entity_entityDataSet), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cds__fw__entity_entityDataSet)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_fw__entity_entityDataSet *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTofw__entityData(soap, "entityData", &(a->_fw__entity_entityDataSet::entityData), "fw:entityData"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_fw__entity_entityDataSet *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds__fw__entity_entityDataSet, 0, sizeof(_fw__entity_entityDataSet), 0, soap_copy__fw__entity_entityDataSet);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _fw__entity_entityDataSet::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cds__fw__entity_entityDataSet);
	if (this->soap_out(soap, tag?tag:"fw:entity-entityDataSet", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_fw__entity_entityDataSet::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__fw__entity_entityDataSet(soap, this, tag, type);
}

SOAP_FMAC3 _fw__entity_entityDataSet * SOAP_FMAC4 soap_get__fw__entity_entityDataSet(struct soap *soap, _fw__entity_entityDataSet *p, const char *tag, const char *type)
{
	if ((p = soap_in__fw__entity_entityDataSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _fw__entity_entityDataSet * SOAP_FMAC2 soap_instantiate__fw__entity_entityDataSet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__fw__entity_entityDataSet(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds__fw__entity_entityDataSet, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_fw__entity_entityDataSet);
		if (size)
			*size = sizeof(_fw__entity_entityDataSet);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_fw__entity_entityDataSet[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_fw__entity_entityDataSet);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_fw__entity_entityDataSet*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fw__entity_entityDataSet(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _fw__entity_entityDataSet %p -> %p\n", q, p));
	*(_fw__entity_entityDataSet*)p = *(_fw__entity_entityDataSet*)q;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__entityType(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_cds_fw__entityType), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_fw__entityType(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_cds_fw__entityType, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, 0, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_cds_fw__entityType, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_cds_fw__entityType, 0, sizeof(std::string), 0, soap_copy_fw__entityType);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__entityType(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__entityType);
	if (soap_out_fw__entityType(soap, tag?tag:"fw:entityType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_fw__entityType(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__entityType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__entityStatus(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_cds_fw__entityStatus), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_fw__entityStatus(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_cds_fw__entityStatus, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, 0, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_cds_fw__entityStatus, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_cds_fw__entityStatus, 0, sizeof(std::string), 0, soap_copy_fw__entityStatus);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__entityStatus(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__entityStatus);
	if (soap_out_fw__entityStatus(soap, tag?tag:"fw:entityStatus", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_fw__entityStatus(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__entityStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__user(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_cds_fw__user), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_fw__user(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_cds_fw__user, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, 0, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_cds_fw__user, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_cds_fw__user, 0, sizeof(std::string), 0, soap_copy_fw__user);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__user(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__user);
	if (soap_out_fw__user(soap, tag?tag:"fw:user", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_fw__user(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__user(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__entityAttribute(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_cds_fw__entityAttribute), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_fw__entityAttribute(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_cds_fw__entityAttribute, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, 0, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_cds_fw__entityAttribute, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_cds_fw__entityAttribute, 0, sizeof(std::string), 0, soap_copy_fw__entityAttribute);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__entityAttribute(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__entityAttribute);
	if (soap_out_fw__entityAttribute(soap, tag?tag:"fw:entityAttribute", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_fw__entityAttribute(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__entityAttribute(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_cds_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_cds_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, 0, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_cds_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_cds_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_std__string, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void ns2__longArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfLONG64(soap, &this->ns2__longArray::item);
	/* transient soap skipped */
}

void ns2__longArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfLONG64(soap, &this->ns2__longArray::item);
	/* transient soap skipped */
}

int ns2__longArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__longArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__longArray(struct soap *soap, const char *tag, int id, const ns2__longArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_ns2__longArray), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfLONG64(soap, "item", -1, &(a->ns2__longArray::item), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns2__longArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__longArray(soap, tag, this, type);
}

SOAP_FMAC3 ns2__longArray * SOAP_FMAC4 soap_in_ns2__longArray(struct soap *soap, const char *tag, ns2__longArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__longArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cds_ns2__longArray, sizeof(ns2__longArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cds_ns2__longArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns2__longArray *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfLONG64(soap, "item", &(a->ns2__longArray::item), "xsd:long"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__longArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_ns2__longArray, 0, sizeof(ns2__longArray), 0, soap_copy_ns2__longArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns2__longArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cds_ns2__longArray);
	if (this->soap_out(soap, tag?tag:"ns2:longArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns2__longArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__longArray(soap, this, tag, type);
}

SOAP_FMAC3 ns2__longArray * SOAP_FMAC4 soap_get_ns2__longArray(struct soap *soap, ns2__longArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__longArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns2__longArray * SOAP_FMAC2 soap_instantiate_ns2__longArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__longArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_ns2__longArray, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns2__longArray);
		if (size)
			*size = sizeof(ns2__longArray);
		((ns2__longArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns2__longArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns2__longArray);
		for (int i = 0; i < n; i++)
			((ns2__longArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns2__longArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__longArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns2__longArray %p -> %p\n", q, p));
	*(ns2__longArray*)p = *(ns2__longArray*)q;
}

void fw__entityArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTofw__entity(soap, &this->fw__entityArray::item);
	/* transient soap skipped */
}

void fw__entityArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTofw__entity(soap, &this->fw__entityArray::item);
	/* transient soap skipped */
}

int fw__entityArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_fw__entityArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__entityArray(struct soap *soap, const char *tag, int id, const fw__entityArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__entityArray), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTofw__entity(soap, "item", -1, &(a->fw__entityArray::item), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *fw__entityArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_fw__entityArray(soap, tag, this, type);
}

SOAP_FMAC3 fw__entityArray * SOAP_FMAC4 soap_in_fw__entityArray(struct soap *soap, const char *tag, fw__entityArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (fw__entityArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__entityArray, sizeof(fw__entityArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cds_fw__entityArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (fw__entityArray *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTofw__entity(soap, "item", &(a->fw__entityArray::item), "fw:entity"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (fw__entityArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__entityArray, 0, sizeof(fw__entityArray), 0, soap_copy_fw__entityArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int fw__entityArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cds_fw__entityArray);
	if (this->soap_out(soap, tag?tag:"fw:entityArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *fw__entityArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_fw__entityArray(soap, this, tag, type);
}

SOAP_FMAC3 fw__entityArray * SOAP_FMAC4 soap_get_fw__entityArray(struct soap *soap, fw__entityArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__entityArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 fw__entityArray * SOAP_FMAC2 soap_instantiate_fw__entityArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__entityArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__entityArray, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(fw__entityArray);
		if (size)
			*size = sizeof(fw__entityArray);
		((fw__entityArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(fw__entityArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(fw__entityArray);
		for (int i = 0; i < n; i++)
			((fw__entityArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (fw__entityArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__entityArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying fw__entityArray %p -> %p\n", q, p));
	*(fw__entityArray*)p = *(fw__entityArray*)q;
}

void fw__entityDataArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTofw__entityData(soap, &this->fw__entityDataArray::item);
	/* transient soap skipped */
}

void fw__entityDataArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTofw__entityData(soap, &this->fw__entityDataArray::item);
	/* transient soap skipped */
}

int fw__entityDataArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_fw__entityDataArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__entityDataArray(struct soap *soap, const char *tag, int id, const fw__entityDataArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__entityDataArray), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTofw__entityData(soap, "item", -1, &(a->fw__entityDataArray::item), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *fw__entityDataArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_fw__entityDataArray(soap, tag, this, type);
}

SOAP_FMAC3 fw__entityDataArray * SOAP_FMAC4 soap_in_fw__entityDataArray(struct soap *soap, const char *tag, fw__entityDataArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (fw__entityDataArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__entityDataArray, sizeof(fw__entityDataArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cds_fw__entityDataArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (fw__entityDataArray *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTofw__entityData(soap, "item", &(a->fw__entityDataArray::item), "fw:entityData"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (fw__entityDataArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__entityDataArray, 0, sizeof(fw__entityDataArray), 0, soap_copy_fw__entityDataArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int fw__entityDataArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cds_fw__entityDataArray);
	if (this->soap_out(soap, tag?tag:"fw:entityDataArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *fw__entityDataArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_fw__entityDataArray(soap, this, tag, type);
}

SOAP_FMAC3 fw__entityDataArray * SOAP_FMAC4 soap_get_fw__entityDataArray(struct soap *soap, fw__entityDataArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__entityDataArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 fw__entityDataArray * SOAP_FMAC2 soap_instantiate_fw__entityDataArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__entityDataArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__entityDataArray, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(fw__entityDataArray);
		if (size)
			*size = sizeof(fw__entityDataArray);
		((fw__entityDataArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(fw__entityDataArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(fw__entityDataArray);
		for (int i = 0; i < n; i++)
			((fw__entityDataArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (fw__entityDataArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__entityDataArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying fw__entityDataArray %p -> %p\n", q, p));
	*(fw__entityDataArray*)p = *(fw__entityDataArray*)q;
}

void fw__annotationSession::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->fw__annotationSession::id = NULL;
	this->fw__annotationSession::name = NULL;
	this->fw__annotationSession::owner = NULL;
	/* transient soap skipped */
}

void fw__annotationSession::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int fw__annotationSession::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_fw__annotationSession(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__annotationSession(struct soap *soap, const char *tag, int id, const fw__annotationSession *a, const char *type)
{
	if (((fw__annotationSession*)a)->id)
		soap_set_attr(soap, "id", soap_LONG642s(soap, *((fw__annotationSession*)a)->id), 1);
	if (((fw__annotationSession*)a)->name)
		soap_set_attr(soap, "name", ((fw__annotationSession*)a)->name->c_str(), 1);
	if (((fw__annotationSession*)a)->owner)
		soap_set_attr(soap, "owner", ((fw__annotationSession*)a)->owner->c_str(), 1);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__annotationSession), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *fw__annotationSession::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_fw__annotationSession(soap, tag, this, type);
}

SOAP_FMAC3 fw__annotationSession * SOAP_FMAC4 soap_in_fw__annotationSession(struct soap *soap, const char *tag, fw__annotationSession *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (fw__annotationSession *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__annotationSession, sizeof(fw__annotationSession), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cds_fw__annotationSession)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (fw__annotationSession *)a->soap_in(soap, tag, type);
		}
	}
	{	const char *t = soap_attr_value(soap, "id", 0);
		if (t)
		{
			if (!(((fw__annotationSession*)a)->id = (LONG64 *)soap_malloc(soap, sizeof(LONG64))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2LONG64(soap, t, ((fw__annotationSession*)a)->id))
			return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	{	const char *t = soap_attr_value(soap, "name", 0);
		if (t)
		{
			char *s = NULL;
			if (soap_s2string(soap, t, &s, 0, -1))
				return NULL;
			if (s)
			{	((fw__annotationSession*)a)->name = soap_new_std__string(soap, -1);
				((fw__annotationSession*)a)->name->assign(s);
			}
		}
		else if (soap->error)
			return NULL;
	}
	{	const char *t = soap_attr_value(soap, "owner", 0);
		if (t)
		{
			char *s = NULL;
			if (soap_s2string(soap, t, &s, 0, -1))
				return NULL;
			if (s)
			{	((fw__annotationSession*)a)->owner = soap_new_std__string(soap, -1);
				((fw__annotationSession*)a)->owner->assign(s);
			}
		}
		else if (soap->error)
			return NULL;
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (fw__annotationSession *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__annotationSession, 0, sizeof(fw__annotationSession), 0, soap_copy_fw__annotationSession);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int fw__annotationSession::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cds_fw__annotationSession);
	if (this->soap_out(soap, tag?tag:"fw:annotationSession", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *fw__annotationSession::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_fw__annotationSession(soap, this, tag, type);
}

SOAP_FMAC3 fw__annotationSession * SOAP_FMAC4 soap_get_fw__annotationSession(struct soap *soap, fw__annotationSession *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__annotationSession(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 fw__annotationSession * SOAP_FMAC2 soap_instantiate_fw__annotationSession(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__annotationSession(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__annotationSession, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(fw__annotationSession);
		if (size)
			*size = sizeof(fw__annotationSession);
		((fw__annotationSession*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(fw__annotationSession[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(fw__annotationSession);
		for (int i = 0; i < n; i++)
			((fw__annotationSession*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (fw__annotationSession*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__annotationSession(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying fw__annotationSession %p -> %p\n", q, p));
	*(fw__annotationSession*)p = *(fw__annotationSession*)q;
}

void fw__ontologyAnnotation::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->fw__ontologyAnnotation::sessionId = NULL;
	this->fw__ontologyAnnotation::targetEntityId = NULL;
	this->fw__ontologyAnnotation::keyEntityId = NULL;
	this->fw__ontologyAnnotation::keyString = NULL;
	this->fw__ontologyAnnotation::valueEntityId = NULL;
	this->fw__ontologyAnnotation::valueString = NULL;
	this->fw__ontologyAnnotation::id = NULL;
	/* transient soap skipped */
}

void fw__ontologyAnnotation::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToLONG64(soap, &this->fw__ontologyAnnotation::sessionId);
	soap_serialize_PointerToLONG64(soap, &this->fw__ontologyAnnotation::targetEntityId);
	soap_serialize_PointerToLONG64(soap, &this->fw__ontologyAnnotation::keyEntityId);
	soap_serialize_PointerTostd__string(soap, &this->fw__ontologyAnnotation::keyString);
	soap_serialize_PointerToLONG64(soap, &this->fw__ontologyAnnotation::valueEntityId);
	soap_serialize_PointerTostd__string(soap, &this->fw__ontologyAnnotation::valueString);
	/* transient soap skipped */
}

int fw__ontologyAnnotation::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_fw__ontologyAnnotation(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__ontologyAnnotation(struct soap *soap, const char *tag, int id, const fw__ontologyAnnotation *a, const char *type)
{
	if (((fw__ontologyAnnotation*)a)->id)
		soap_set_attr(soap, "id", soap_LONG642s(soap, *((fw__ontologyAnnotation*)a)->id), 1);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__ontologyAnnotation), type))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "sessionId", -1, &(a->fw__ontologyAnnotation::sessionId), ""))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "targetEntityId", -1, &(a->fw__ontologyAnnotation::targetEntityId), ""))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "keyEntityId", -1, &(a->fw__ontologyAnnotation::keyEntityId), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "keyString", -1, &(a->fw__ontologyAnnotation::keyString), ""))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "valueEntityId", -1, &(a->fw__ontologyAnnotation::valueEntityId), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "valueString", -1, &(a->fw__ontologyAnnotation::valueString), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *fw__ontologyAnnotation::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_fw__ontologyAnnotation(soap, tag, this, type);
}

SOAP_FMAC3 fw__ontologyAnnotation * SOAP_FMAC4 soap_in_fw__ontologyAnnotation(struct soap *soap, const char *tag, fw__ontologyAnnotation *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (fw__ontologyAnnotation *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__ontologyAnnotation, sizeof(fw__ontologyAnnotation), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cds_fw__ontologyAnnotation)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (fw__ontologyAnnotation *)a->soap_in(soap, tag, type);
		}
	}
	{	const char *t = soap_attr_value(soap, "id", 0);
		if (t)
		{
			if (!(((fw__ontologyAnnotation*)a)->id = (LONG64 *)soap_malloc(soap, sizeof(LONG64))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2LONG64(soap, t, ((fw__ontologyAnnotation*)a)->id))
			return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	size_t soap_flag_sessionId1 = 1;
	size_t soap_flag_targetEntityId1 = 1;
	size_t soap_flag_keyEntityId1 = 1;
	size_t soap_flag_keyString1 = 1;
	size_t soap_flag_valueEntityId1 = 1;
	size_t soap_flag_valueString1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToLONG64(soap, "sessionId", &(a->fw__ontologyAnnotation::sessionId), "xsd:long"))
				{	soap_flag_sessionId1--;
					continue;
				}
			if (soap_flag_targetEntityId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToLONG64(soap, "targetEntityId", &(a->fw__ontologyAnnotation::targetEntityId), "xsd:long"))
				{	soap_flag_targetEntityId1--;
					continue;
				}
			if (soap_flag_keyEntityId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToLONG64(soap, "keyEntityId", &(a->fw__ontologyAnnotation::keyEntityId), "xsd:long"))
				{	soap_flag_keyEntityId1--;
					continue;
				}
			if (soap_flag_keyString1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "keyString", &(a->fw__ontologyAnnotation::keyString), "xsd:string"))
				{	soap_flag_keyString1--;
					continue;
				}
			if (soap_flag_valueEntityId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToLONG64(soap, "valueEntityId", &(a->fw__ontologyAnnotation::valueEntityId), "xsd:long"))
				{	soap_flag_valueEntityId1--;
					continue;
				}
			if (soap_flag_valueString1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "valueString", &(a->fw__ontologyAnnotation::valueString), "xsd:string"))
				{	soap_flag_valueString1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (fw__ontologyAnnotation *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__ontologyAnnotation, 0, sizeof(fw__ontologyAnnotation), 0, soap_copy_fw__ontologyAnnotation);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int fw__ontologyAnnotation::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cds_fw__ontologyAnnotation);
	if (this->soap_out(soap, tag?tag:"fw:ontologyAnnotation", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *fw__ontologyAnnotation::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_fw__ontologyAnnotation(soap, this, tag, type);
}

SOAP_FMAC3 fw__ontologyAnnotation * SOAP_FMAC4 soap_get_fw__ontologyAnnotation(struct soap *soap, fw__ontologyAnnotation *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__ontologyAnnotation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 fw__ontologyAnnotation * SOAP_FMAC2 soap_instantiate_fw__ontologyAnnotation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__ontologyAnnotation(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__ontologyAnnotation, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(fw__ontologyAnnotation);
		if (size)
			*size = sizeof(fw__ontologyAnnotation);
		((fw__ontologyAnnotation*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(fw__ontologyAnnotation[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(fw__ontologyAnnotation);
		for (int i = 0; i < n; i++)
			((fw__ontologyAnnotation*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (fw__ontologyAnnotation*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__ontologyAnnotation(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying fw__ontologyAnnotation %p -> %p\n", q, p));
	*(fw__ontologyAnnotation*)p = *(fw__ontologyAnnotation*)q;
}

void fw__ontologyKeyBind::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->fw__ontologyKeyBind::key = NULL;
	this->fw__ontologyKeyBind::ontologyTermId = NULL;
	/* transient soap skipped */
}

void fw__ontologyKeyBind::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->fw__ontologyKeyBind::key);
	soap_serialize_PointerToLONG64(soap, &this->fw__ontologyKeyBind::ontologyTermId);
	/* transient soap skipped */
}

int fw__ontologyKeyBind::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_fw__ontologyKeyBind(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__ontologyKeyBind(struct soap *soap, const char *tag, int id, const fw__ontologyKeyBind *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__ontologyKeyBind), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "key", -1, &(a->fw__ontologyKeyBind::key), ""))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "ontologyTermId", -1, &(a->fw__ontologyKeyBind::ontologyTermId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *fw__ontologyKeyBind::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_fw__ontologyKeyBind(soap, tag, this, type);
}

SOAP_FMAC3 fw__ontologyKeyBind * SOAP_FMAC4 soap_in_fw__ontologyKeyBind(struct soap *soap, const char *tag, fw__ontologyKeyBind *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (fw__ontologyKeyBind *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__ontologyKeyBind, sizeof(fw__ontologyKeyBind), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cds_fw__ontologyKeyBind)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (fw__ontologyKeyBind *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_key1 = 1;
	size_t soap_flag_ontologyTermId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_key1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "key", &(a->fw__ontologyKeyBind::key), "xsd:string"))
				{	soap_flag_key1--;
					continue;
				}
			if (soap_flag_ontologyTermId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToLONG64(soap, "ontologyTermId", &(a->fw__ontologyKeyBind::ontologyTermId), "xsd:long"))
				{	soap_flag_ontologyTermId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (fw__ontologyKeyBind *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__ontologyKeyBind, 0, sizeof(fw__ontologyKeyBind), 0, soap_copy_fw__ontologyKeyBind);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int fw__ontologyKeyBind::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cds_fw__ontologyKeyBind);
	if (this->soap_out(soap, tag?tag:"fw:ontologyKeyBind", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *fw__ontologyKeyBind::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_fw__ontologyKeyBind(soap, this, tag, type);
}

SOAP_FMAC3 fw__ontologyKeyBind * SOAP_FMAC4 soap_get_fw__ontologyKeyBind(struct soap *soap, fw__ontologyKeyBind *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__ontologyKeyBind(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 fw__ontologyKeyBind * SOAP_FMAC2 soap_instantiate_fw__ontologyKeyBind(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__ontologyKeyBind(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__ontologyKeyBind, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(fw__ontologyKeyBind);
		if (size)
			*size = sizeof(fw__ontologyKeyBind);
		((fw__ontologyKeyBind*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(fw__ontologyKeyBind[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(fw__ontologyKeyBind);
		for (int i = 0; i < n; i++)
			((fw__ontologyKeyBind*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (fw__ontologyKeyBind*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__ontologyKeyBind(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying fw__ontologyKeyBind %p -> %p\n", q, p));
	*(fw__ontologyKeyBind*)p = *(fw__ontologyKeyBind*)q;
}

void fw__ontologyKeyBindings::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->fw__ontologyKeyBindings::user = NULL;
	this->fw__ontologyKeyBindings::ontologyId = NULL;
	this->fw__ontologyKeyBindings::keyBindingSet = NULL;
	/* transient soap skipped */
}

void fw__ontologyKeyBindings::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->fw__ontologyKeyBindings::user);
	soap_serialize_PointerToLONG64(soap, &this->fw__ontologyKeyBindings::ontologyId);
	soap_serialize_PointerTo_fw__ontologyKeyBindings_keyBindingSet(soap, &this->fw__ontologyKeyBindings::keyBindingSet);
	/* transient soap skipped */
}

int fw__ontologyKeyBindings::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_fw__ontologyKeyBindings(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__ontologyKeyBindings(struct soap *soap, const char *tag, int id, const fw__ontologyKeyBindings *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__ontologyKeyBindings), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "user", -1, &(a->fw__ontologyKeyBindings::user), ""))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "ontologyId", -1, &(a->fw__ontologyKeyBindings::ontologyId), ""))
		return soap->error;
	if (soap_out_PointerTo_fw__ontologyKeyBindings_keyBindingSet(soap, "keyBindingSet", -1, &(a->fw__ontologyKeyBindings::keyBindingSet), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *fw__ontologyKeyBindings::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_fw__ontologyKeyBindings(soap, tag, this, type);
}

SOAP_FMAC3 fw__ontologyKeyBindings * SOAP_FMAC4 soap_in_fw__ontologyKeyBindings(struct soap *soap, const char *tag, fw__ontologyKeyBindings *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (fw__ontologyKeyBindings *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__ontologyKeyBindings, sizeof(fw__ontologyKeyBindings), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cds_fw__ontologyKeyBindings)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (fw__ontologyKeyBindings *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_user1 = 1;
	size_t soap_flag_ontologyId1 = 1;
	size_t soap_flag_keyBindingSet1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_user1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "user", &(a->fw__ontologyKeyBindings::user), "xsd:string"))
				{	soap_flag_user1--;
					continue;
				}
			if (soap_flag_ontologyId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToLONG64(soap, "ontologyId", &(a->fw__ontologyKeyBindings::ontologyId), "xsd:long"))
				{	soap_flag_ontologyId1--;
					continue;
				}
			if (soap_flag_keyBindingSet1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_fw__ontologyKeyBindings_keyBindingSet(soap, "keyBindingSet", &(a->fw__ontologyKeyBindings::keyBindingSet), ""))
				{	soap_flag_keyBindingSet1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (fw__ontologyKeyBindings *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__ontologyKeyBindings, 0, sizeof(fw__ontologyKeyBindings), 0, soap_copy_fw__ontologyKeyBindings);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int fw__ontologyKeyBindings::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cds_fw__ontologyKeyBindings);
	if (this->soap_out(soap, tag?tag:"fw:ontologyKeyBindings", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *fw__ontologyKeyBindings::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_fw__ontologyKeyBindings(soap, this, tag, type);
}

SOAP_FMAC3 fw__ontologyKeyBindings * SOAP_FMAC4 soap_get_fw__ontologyKeyBindings(struct soap *soap, fw__ontologyKeyBindings *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__ontologyKeyBindings(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 fw__ontologyKeyBindings * SOAP_FMAC2 soap_instantiate_fw__ontologyKeyBindings(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__ontologyKeyBindings(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__ontologyKeyBindings, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(fw__ontologyKeyBindings);
		if (size)
			*size = sizeof(fw__ontologyKeyBindings);
		((fw__ontologyKeyBindings*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(fw__ontologyKeyBindings[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(fw__ontologyKeyBindings);
		for (int i = 0; i < n; i++)
			((fw__ontologyKeyBindings*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (fw__ontologyKeyBindings*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__ontologyKeyBindings(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying fw__ontologyKeyBindings %p -> %p\n", q, p));
	*(fw__ontologyKeyBindings*)p = *(fw__ontologyKeyBindings*)q;
}

void fw__entity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->fw__entity::name = NULL;
	this->fw__entity::user = NULL;
	this->fw__entity::entityStatus = NULL;
	this->fw__entity::entityType = NULL;
	this->fw__entity::entityDataSet = NULL;
	this->fw__entity::guid = NULL;
	/* transient soap skipped */
}

void fw__entity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->fw__entity::name);
	soap_serialize_PointerTofw__user(soap, &this->fw__entity::user);
	soap_serialize_PointerTofw__entityStatus(soap, &this->fw__entity::entityStatus);
	soap_serialize_PointerTofw__entityType(soap, &this->fw__entity::entityType);
	soap_serialize_PointerTo_fw__entity_entityDataSet(soap, &this->fw__entity::entityDataSet);
	/* transient soap skipped */
}

int fw__entity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_fw__entity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__entity(struct soap *soap, const char *tag, int id, const fw__entity *a, const char *type)
{
	if (((fw__entity*)a)->guid)
		soap_set_attr(soap, "guid", soap_LONG642s(soap, *((fw__entity*)a)->guid), 1);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__entity), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "name", -1, &(a->fw__entity::name), ""))
		return soap->error;
	if (soap_out_PointerTofw__user(soap, "user", -1, &(a->fw__entity::user), ""))
		return soap->error;
	if (soap_out_PointerTofw__entityStatus(soap, "entityStatus", -1, &(a->fw__entity::entityStatus), ""))
		return soap->error;
	if (soap_out_PointerTofw__entityType(soap, "entityType", -1, &(a->fw__entity::entityType), ""))
		return soap->error;
	if (soap_out_PointerTo_fw__entity_entityDataSet(soap, "entityDataSet", -1, &(a->fw__entity::entityDataSet), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *fw__entity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_fw__entity(soap, tag, this, type);
}

SOAP_FMAC3 fw__entity * SOAP_FMAC4 soap_in_fw__entity(struct soap *soap, const char *tag, fw__entity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (fw__entity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__entity, sizeof(fw__entity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cds_fw__entity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (fw__entity *)a->soap_in(soap, tag, type);
		}
	}
	{	const char *t = soap_attr_value(soap, "guid", 0);
		if (t)
		{
			if (!(((fw__entity*)a)->guid = (LONG64 *)soap_malloc(soap, sizeof(LONG64))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2LONG64(soap, t, ((fw__entity*)a)->guid))
			return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	size_t soap_flag_name1 = 1;
	size_t soap_flag_user1 = 1;
	size_t soap_flag_entityStatus1 = 1;
	size_t soap_flag_entityType1 = 1;
	size_t soap_flag_entityDataSet1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "name", &(a->fw__entity::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_user1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTofw__user(soap, "user", &(a->fw__entity::user), "fw:user"))
				{	soap_flag_user1--;
					continue;
				}
			if (soap_flag_entityStatus1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTofw__entityStatus(soap, "entityStatus", &(a->fw__entity::entityStatus), "fw:entityStatus"))
				{	soap_flag_entityStatus1--;
					continue;
				}
			if (soap_flag_entityType1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTofw__entityType(soap, "entityType", &(a->fw__entity::entityType), "fw:entityType"))
				{	soap_flag_entityType1--;
					continue;
				}
			if (soap_flag_entityDataSet1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_fw__entity_entityDataSet(soap, "entityDataSet", &(a->fw__entity::entityDataSet), ""))
				{	soap_flag_entityDataSet1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (fw__entity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__entity, 0, sizeof(fw__entity), 0, soap_copy_fw__entity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int fw__entity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cds_fw__entity);
	if (this->soap_out(soap, tag?tag:"fw:entity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *fw__entity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_fw__entity(soap, this, tag, type);
}

SOAP_FMAC3 fw__entity * SOAP_FMAC4 soap_get_fw__entity(struct soap *soap, fw__entity *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__entity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 fw__entity * SOAP_FMAC2 soap_instantiate_fw__entity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__entity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__entity, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(fw__entity);
		if (size)
			*size = sizeof(fw__entity);
		((fw__entity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(fw__entity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(fw__entity);
		for (int i = 0; i < n; i++)
			((fw__entity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (fw__entity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__entity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying fw__entity %p -> %p\n", q, p));
	*(fw__entity*)p = *(fw__entity*)q;
}

void fw__entityData::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->fw__entityData::entityAttribute = NULL;
	this->fw__entityData::childEntity = NULL;
	this->fw__entityData::user = NULL;
	this->fw__entityData::value = NULL;
	this->fw__entityData::orderIndex = NULL;
	this->fw__entityData::guid = NULL;
	/* transient soap skipped */
}

void fw__entityData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTofw__entityAttribute(soap, &this->fw__entityData::entityAttribute);
	soap_serialize_PointerTofw__entity(soap, &this->fw__entityData::childEntity);
	soap_serialize_PointerTofw__user(soap, &this->fw__entityData::user);
	soap_serialize_PointerTostd__string(soap, &this->fw__entityData::value);
	soap_serialize_PointerToint(soap, &this->fw__entityData::orderIndex);
	/* transient soap skipped */
}

int fw__entityData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_fw__entityData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__entityData(struct soap *soap, const char *tag, int id, const fw__entityData *a, const char *type)
{
	if (((fw__entityData*)a)->guid)
		soap_set_attr(soap, "guid", soap_LONG642s(soap, *((fw__entityData*)a)->guid), 1);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__entityData), type))
		return soap->error;
	if (soap_out_PointerTofw__entityAttribute(soap, "entityAttribute", -1, &(a->fw__entityData::entityAttribute), ""))
		return soap->error;
	if (soap_out_PointerTofw__entity(soap, "childEntity", -1, &(a->fw__entityData::childEntity), ""))
		return soap->error;
	if (soap_out_PointerTofw__user(soap, "user", -1, &(a->fw__entityData::user), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "value", -1, &(a->fw__entityData::value), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "orderIndex", -1, &(a->fw__entityData::orderIndex), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *fw__entityData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_fw__entityData(soap, tag, this, type);
}

SOAP_FMAC3 fw__entityData * SOAP_FMAC4 soap_in_fw__entityData(struct soap *soap, const char *tag, fw__entityData *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (fw__entityData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__entityData, sizeof(fw__entityData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_cds_fw__entityData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (fw__entityData *)a->soap_in(soap, tag, type);
		}
	}
	{	const char *t = soap_attr_value(soap, "guid", 0);
		if (t)
		{
			if (!(((fw__entityData*)a)->guid = (LONG64 *)soap_malloc(soap, sizeof(LONG64))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2LONG64(soap, t, ((fw__entityData*)a)->guid))
			return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	size_t soap_flag_entityAttribute1 = 1;
	size_t soap_flag_childEntity1 = 1;
	size_t soap_flag_user1 = 1;
	size_t soap_flag_value1 = 1;
	size_t soap_flag_orderIndex1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_entityAttribute1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTofw__entityAttribute(soap, "entityAttribute", &(a->fw__entityData::entityAttribute), "fw:entityAttribute"))
				{	soap_flag_entityAttribute1--;
					continue;
				}
			if (soap_flag_childEntity1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTofw__entity(soap, "childEntity", &(a->fw__entityData::childEntity), "fw:entity"))
				{	soap_flag_childEntity1--;
					continue;
				}
			if (soap_flag_user1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTofw__user(soap, "user", &(a->fw__entityData::user), "fw:user"))
				{	soap_flag_user1--;
					continue;
				}
			if (soap_flag_value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "value", &(a->fw__entityData::value), "xsd:string"))
				{	soap_flag_value1--;
					continue;
				}
			if (soap_flag_orderIndex1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "orderIndex", &(a->fw__entityData::orderIndex), "xsd:int"))
				{	soap_flag_orderIndex1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (fw__entityData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__entityData, 0, sizeof(fw__entityData), 0, soap_copy_fw__entityData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int fw__entityData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_cds_fw__entityData);
	if (this->soap_out(soap, tag?tag:"fw:entityData", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *fw__entityData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_fw__entityData(soap, this, tag, type);
}

SOAP_FMAC3 fw__entityData * SOAP_FMAC4 soap_get_fw__entityData(struct soap *soap, fw__entityData *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__entityData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 fw__entityData * SOAP_FMAC2 soap_instantiate_fw__entityData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__entityData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__entityData, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(fw__entityData);
		if (size)
			*size = sizeof(fw__entityData);
		((fw__entityData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(fw__entityData[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(fw__entityData);
		for (int i = 0; i < n; i++)
			((fw__entityData*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (fw__entityData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__entityData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying fw__entityData %p -> %p\n", q, p));
	*(fw__entityData*)p = *(fw__entityData*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_SOAP_ENV__Fault, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_SOAP_ENV__Reason, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_SOAP_ENV__Detail, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_SOAP_ENV__Code, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_SOAP_ENV__Header, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getParentEntityDataArray(struct soap *soap, struct fw__getParentEntityDataArray *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &a->childEntityId);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getParentEntityDataArray(struct soap *soap, const struct fw__getParentEntityDataArray *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->childEntityId, SOAP_TYPE_cds_LONG64);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getParentEntityDataArray(struct soap *soap, const char *tag, int id, const struct fw__getParentEntityDataArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getParentEntityDataArray), type))
		return soap->error;
	if (soap_out_LONG64(soap, "childEntityId", -1, &a->childEntityId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getParentEntityDataArray * SOAP_FMAC4 soap_in_fw__getParentEntityDataArray(struct soap *soap, const char *tag, struct fw__getParentEntityDataArray *a, const char *type)
{
	size_t soap_flag_childEntityId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getParentEntityDataArray *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getParentEntityDataArray, sizeof(struct fw__getParentEntityDataArray), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getParentEntityDataArray(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_childEntityId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "childEntityId", &a->childEntityId, "xsd:long"))
				{	soap_flag_childEntityId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getParentEntityDataArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getParentEntityDataArray, 0, sizeof(struct fw__getParentEntityDataArray), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_childEntityId > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getParentEntityDataArray(struct soap *soap, const struct fw__getParentEntityDataArray *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getParentEntityDataArray);
	if (soap_out_fw__getParentEntityDataArray(soap, tag?tag:"fw:getParentEntityDataArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getParentEntityDataArray * SOAP_FMAC4 soap_get_fw__getParentEntityDataArray(struct soap *soap, struct fw__getParentEntityDataArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getParentEntityDataArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getParentEntityDataArray * SOAP_FMAC2 soap_instantiate_fw__getParentEntityDataArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getParentEntityDataArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getParentEntityDataArray, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getParentEntityDataArray);
		if (size)
			*size = sizeof(struct fw__getParentEntityDataArray);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getParentEntityDataArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getParentEntityDataArray);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getParentEntityDataArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getParentEntityDataArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getParentEntityDataArray %p -> %p\n", q, p));
	*(struct fw__getParentEntityDataArray*)p = *(struct fw__getParentEntityDataArray*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getParentEntityDataArrayResponse(struct soap *soap, struct fw__getParentEntityDataArrayResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getParentEntityDataArrayResponse(struct soap *soap, const struct fw__getParentEntityDataArrayResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTofw__entityDataArray(soap, &a->return_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getParentEntityDataArrayResponse(struct soap *soap, const char *tag, int id, const struct fw__getParentEntityDataArrayResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getParentEntityDataArrayResponse), type))
		return soap->error;
	if (soap_out_PointerTofw__entityDataArray(soap, "return", -1, &a->return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getParentEntityDataArrayResponse * SOAP_FMAC4 soap_in_fw__getParentEntityDataArrayResponse(struct soap *soap, const char *tag, struct fw__getParentEntityDataArrayResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getParentEntityDataArrayResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getParentEntityDataArrayResponse, sizeof(struct fw__getParentEntityDataArrayResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getParentEntityDataArrayResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTofw__entityDataArray(soap, "return", &a->return_, "fw:entityDataArray"))
				{	soap_flag_return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getParentEntityDataArrayResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getParentEntityDataArrayResponse, 0, sizeof(struct fw__getParentEntityDataArrayResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getParentEntityDataArrayResponse(struct soap *soap, const struct fw__getParentEntityDataArrayResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getParentEntityDataArrayResponse);
	if (soap_out_fw__getParentEntityDataArrayResponse(soap, tag?tag:"fw:getParentEntityDataArrayResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getParentEntityDataArrayResponse * SOAP_FMAC4 soap_get_fw__getParentEntityDataArrayResponse(struct soap *soap, struct fw__getParentEntityDataArrayResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getParentEntityDataArrayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getParentEntityDataArrayResponse * SOAP_FMAC2 soap_instantiate_fw__getParentEntityDataArrayResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getParentEntityDataArrayResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getParentEntityDataArrayResponse, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getParentEntityDataArrayResponse);
		if (size)
			*size = sizeof(struct fw__getParentEntityDataArrayResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getParentEntityDataArrayResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getParentEntityDataArrayResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getParentEntityDataArrayResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getParentEntityDataArrayResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getParentEntityDataArrayResponse %p -> %p\n", q, p));
	*(struct fw__getParentEntityDataArrayResponse*)p = *(struct fw__getParentEntityDataArrayResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getParentEntityArray(struct soap *soap, struct fw__getParentEntityArray *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &a->childEntityId);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getParentEntityArray(struct soap *soap, const struct fw__getParentEntityArray *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->childEntityId, SOAP_TYPE_cds_LONG64);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getParentEntityArray(struct soap *soap, const char *tag, int id, const struct fw__getParentEntityArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getParentEntityArray), type))
		return soap->error;
	if (soap_out_LONG64(soap, "childEntityId", -1, &a->childEntityId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getParentEntityArray * SOAP_FMAC4 soap_in_fw__getParentEntityArray(struct soap *soap, const char *tag, struct fw__getParentEntityArray *a, const char *type)
{
	size_t soap_flag_childEntityId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getParentEntityArray *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getParentEntityArray, sizeof(struct fw__getParentEntityArray), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getParentEntityArray(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_childEntityId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "childEntityId", &a->childEntityId, "xsd:long"))
				{	soap_flag_childEntityId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getParentEntityArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getParentEntityArray, 0, sizeof(struct fw__getParentEntityArray), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_childEntityId > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getParentEntityArray(struct soap *soap, const struct fw__getParentEntityArray *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getParentEntityArray);
	if (soap_out_fw__getParentEntityArray(soap, tag?tag:"fw:getParentEntityArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getParentEntityArray * SOAP_FMAC4 soap_get_fw__getParentEntityArray(struct soap *soap, struct fw__getParentEntityArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getParentEntityArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getParentEntityArray * SOAP_FMAC2 soap_instantiate_fw__getParentEntityArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getParentEntityArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getParentEntityArray, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getParentEntityArray);
		if (size)
			*size = sizeof(struct fw__getParentEntityArray);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getParentEntityArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getParentEntityArray);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getParentEntityArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getParentEntityArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getParentEntityArray %p -> %p\n", q, p));
	*(struct fw__getParentEntityArray*)p = *(struct fw__getParentEntityArray*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getParentEntityArrayResponse(struct soap *soap, struct fw__getParentEntityArrayResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getParentEntityArrayResponse(struct soap *soap, const struct fw__getParentEntityArrayResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTofw__entityArray(soap, &a->return_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getParentEntityArrayResponse(struct soap *soap, const char *tag, int id, const struct fw__getParentEntityArrayResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getParentEntityArrayResponse), type))
		return soap->error;
	if (soap_out_PointerTofw__entityArray(soap, "return", -1, &a->return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getParentEntityArrayResponse * SOAP_FMAC4 soap_in_fw__getParentEntityArrayResponse(struct soap *soap, const char *tag, struct fw__getParentEntityArrayResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getParentEntityArrayResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getParentEntityArrayResponse, sizeof(struct fw__getParentEntityArrayResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getParentEntityArrayResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTofw__entityArray(soap, "return", &a->return_, "fw:entityArray"))
				{	soap_flag_return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getParentEntityArrayResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getParentEntityArrayResponse, 0, sizeof(struct fw__getParentEntityArrayResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getParentEntityArrayResponse(struct soap *soap, const struct fw__getParentEntityArrayResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getParentEntityArrayResponse);
	if (soap_out_fw__getParentEntityArrayResponse(soap, tag?tag:"fw:getParentEntityArrayResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getParentEntityArrayResponse * SOAP_FMAC4 soap_get_fw__getParentEntityArrayResponse(struct soap *soap, struct fw__getParentEntityArrayResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getParentEntityArrayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getParentEntityArrayResponse * SOAP_FMAC2 soap_instantiate_fw__getParentEntityArrayResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getParentEntityArrayResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getParentEntityArrayResponse, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getParentEntityArrayResponse);
		if (size)
			*size = sizeof(struct fw__getParentEntityArrayResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getParentEntityArrayResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getParentEntityArrayResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getParentEntityArrayResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getParentEntityArrayResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getParentEntityArrayResponse %p -> %p\n", q, p));
	*(struct fw__getParentEntityArrayResponse*)p = *(struct fw__getParentEntityArrayResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getKeybindings(struct soap *soap, struct fw__getKeybindings *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &a->ontologyId);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getKeybindings(struct soap *soap, const struct fw__getKeybindings *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->ontologyId, SOAP_TYPE_cds_LONG64);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getKeybindings(struct soap *soap, const char *tag, int id, const struct fw__getKeybindings *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getKeybindings), type))
		return soap->error;
	if (soap_out_LONG64(soap, "ontologyId", -1, &a->ontologyId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getKeybindings * SOAP_FMAC4 soap_in_fw__getKeybindings(struct soap *soap, const char *tag, struct fw__getKeybindings *a, const char *type)
{
	size_t soap_flag_ontologyId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getKeybindings *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getKeybindings, sizeof(struct fw__getKeybindings), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getKeybindings(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ontologyId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "ontologyId", &a->ontologyId, "xsd:long"))
				{	soap_flag_ontologyId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getKeybindings *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getKeybindings, 0, sizeof(struct fw__getKeybindings), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ontologyId > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getKeybindings(struct soap *soap, const struct fw__getKeybindings *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getKeybindings);
	if (soap_out_fw__getKeybindings(soap, tag?tag:"fw:getKeybindings", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getKeybindings * SOAP_FMAC4 soap_get_fw__getKeybindings(struct soap *soap, struct fw__getKeybindings *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getKeybindings(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getKeybindings * SOAP_FMAC2 soap_instantiate_fw__getKeybindings(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getKeybindings(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getKeybindings, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getKeybindings);
		if (size)
			*size = sizeof(struct fw__getKeybindings);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getKeybindings[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getKeybindings);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getKeybindings*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getKeybindings(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getKeybindings %p -> %p\n", q, p));
	*(struct fw__getKeybindings*)p = *(struct fw__getKeybindings*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getKeybindingsResponse(struct soap *soap, struct fw__getKeybindingsResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getKeybindingsResponse(struct soap *soap, const struct fw__getKeybindingsResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTofw__ontologyKeyBindings(soap, &a->return_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getKeybindingsResponse(struct soap *soap, const char *tag, int id, const struct fw__getKeybindingsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getKeybindingsResponse), type))
		return soap->error;
	if (soap_out_PointerTofw__ontologyKeyBindings(soap, "return", -1, &a->return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getKeybindingsResponse * SOAP_FMAC4 soap_in_fw__getKeybindingsResponse(struct soap *soap, const char *tag, struct fw__getKeybindingsResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getKeybindingsResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getKeybindingsResponse, sizeof(struct fw__getKeybindingsResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getKeybindingsResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTofw__ontologyKeyBindings(soap, "return", &a->return_, "fw:ontologyKeyBindings"))
				{	soap_flag_return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getKeybindingsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getKeybindingsResponse, 0, sizeof(struct fw__getKeybindingsResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getKeybindingsResponse(struct soap *soap, const struct fw__getKeybindingsResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getKeybindingsResponse);
	if (soap_out_fw__getKeybindingsResponse(soap, tag?tag:"fw:getKeybindingsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getKeybindingsResponse * SOAP_FMAC4 soap_get_fw__getKeybindingsResponse(struct soap *soap, struct fw__getKeybindingsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getKeybindingsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getKeybindingsResponse * SOAP_FMAC2 soap_instantiate_fw__getKeybindingsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getKeybindingsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getKeybindingsResponse, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getKeybindingsResponse);
		if (size)
			*size = sizeof(struct fw__getKeybindingsResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getKeybindingsResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getKeybindingsResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getKeybindingsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getKeybindingsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getKeybindingsResponse %p -> %p\n", q, p));
	*(struct fw__getKeybindingsResponse*)p = *(struct fw__getKeybindingsResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__createAnnotation(struct soap *soap, struct fw__createAnnotation *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->annotation = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__createAnnotation(struct soap *soap, const struct fw__createAnnotation *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTofw__ontologyAnnotation(soap, &a->annotation);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__createAnnotation(struct soap *soap, const char *tag, int id, const struct fw__createAnnotation *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__createAnnotation), type))
		return soap->error;
	if (soap_out_PointerTofw__ontologyAnnotation(soap, "annotation", -1, &a->annotation, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__createAnnotation * SOAP_FMAC4 soap_in_fw__createAnnotation(struct soap *soap, const char *tag, struct fw__createAnnotation *a, const char *type)
{
	size_t soap_flag_annotation = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__createAnnotation *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__createAnnotation, sizeof(struct fw__createAnnotation), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__createAnnotation(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_annotation && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTofw__ontologyAnnotation(soap, "annotation", &a->annotation, "fw:ontologyAnnotation"))
				{	soap_flag_annotation--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__createAnnotation *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__createAnnotation, 0, sizeof(struct fw__createAnnotation), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__createAnnotation(struct soap *soap, const struct fw__createAnnotation *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__createAnnotation);
	if (soap_out_fw__createAnnotation(soap, tag?tag:"fw:createAnnotation", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__createAnnotation * SOAP_FMAC4 soap_get_fw__createAnnotation(struct soap *soap, struct fw__createAnnotation *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__createAnnotation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__createAnnotation * SOAP_FMAC2 soap_instantiate_fw__createAnnotation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__createAnnotation(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__createAnnotation, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__createAnnotation);
		if (size)
			*size = sizeof(struct fw__createAnnotation);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__createAnnotation[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__createAnnotation);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__createAnnotation*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__createAnnotation(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__createAnnotation %p -> %p\n", q, p));
	*(struct fw__createAnnotation*)p = *(struct fw__createAnnotation*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__createAnnotationResponse(struct soap *soap, struct fw__createAnnotationResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__createAnnotationResponse(struct soap *soap, const struct fw__createAnnotationResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__createAnnotationResponse(struct soap *soap, const char *tag, int id, const struct fw__createAnnotationResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__createAnnotationResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__createAnnotationResponse * SOAP_FMAC4 soap_in_fw__createAnnotationResponse(struct soap *soap, const char *tag, struct fw__createAnnotationResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__createAnnotationResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__createAnnotationResponse, sizeof(struct fw__createAnnotationResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__createAnnotationResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__createAnnotationResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__createAnnotationResponse, 0, sizeof(struct fw__createAnnotationResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__createAnnotationResponse(struct soap *soap, const struct fw__createAnnotationResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__createAnnotationResponse);
	if (soap_out_fw__createAnnotationResponse(soap, tag?tag:"fw:createAnnotationResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__createAnnotationResponse * SOAP_FMAC4 soap_get_fw__createAnnotationResponse(struct soap *soap, struct fw__createAnnotationResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__createAnnotationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__createAnnotationResponse * SOAP_FMAC2 soap_instantiate_fw__createAnnotationResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__createAnnotationResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__createAnnotationResponse, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__createAnnotationResponse);
		if (size)
			*size = sizeof(struct fw__createAnnotationResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__createAnnotationResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__createAnnotationResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__createAnnotationResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__createAnnotationResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__createAnnotationResponse %p -> %p\n", q, p));
	*(struct fw__createAnnotationResponse*)p = *(struct fw__createAnnotationResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__registerClient(struct soap *soap, struct fw__registerClient *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->_port);
	soap_default_std__string(soap, &a->_endpointUrl);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__registerClient(struct soap *soap, const struct fw__registerClient *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->_port, SOAP_TYPE_cds_int);
	soap_embedded(soap, &a->_endpointUrl, SOAP_TYPE_cds_std__string);
	soap_serialize_std__string(soap, &a->_endpointUrl);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__registerClient(struct soap *soap, const char *tag, int id, const struct fw__registerClient *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__registerClient), type))
		return soap->error;
	if (soap_out_int(soap, "port", -1, &a->_port, ""))
		return soap->error;
	if (soap_out_std__string(soap, "endpointUrl", -1, &a->_endpointUrl, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__registerClient * SOAP_FMAC4 soap_in_fw__registerClient(struct soap *soap, const char *tag, struct fw__registerClient *a, const char *type)
{
	size_t soap_flag__port = 1;
	size_t soap_flag__endpointUrl = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__registerClient *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__registerClient, sizeof(struct fw__registerClient), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_fw__registerClient(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__port && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, NULL, &a->_port, "xsd:int"))
				{	soap_flag__port--;
					continue;
				}
			if (soap_flag__endpointUrl && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_endpointUrl, "xsd:string"))
				{	soap_flag__endpointUrl--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__registerClient *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__registerClient, 0, sizeof(struct fw__registerClient), 0, soap_copy_fw__registerClient);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__port > 0 || soap_flag__endpointUrl > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__registerClient(struct soap *soap, const struct fw__registerClient *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__registerClient);
	if (soap_out_fw__registerClient(soap, tag?tag:"fw:registerClient", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__registerClient * SOAP_FMAC4 soap_get_fw__registerClient(struct soap *soap, struct fw__registerClient *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__registerClient(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__registerClient * SOAP_FMAC2 soap_instantiate_fw__registerClient(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__registerClient(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__registerClient, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__registerClient);
		if (size)
			*size = sizeof(struct fw__registerClient);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__registerClient[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__registerClient);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__registerClient*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__registerClient(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__registerClient %p -> %p\n", q, p));
	*(struct fw__registerClient*)p = *(struct fw__registerClient*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__registerClientResponse(struct soap *soap, struct fw__registerClientResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__registerClientResponse(struct soap *soap, const struct fw__registerClientResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__registerClientResponse(struct soap *soap, const char *tag, int id, const struct fw__registerClientResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__registerClientResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__registerClientResponse * SOAP_FMAC4 soap_in_fw__registerClientResponse(struct soap *soap, const char *tag, struct fw__registerClientResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__registerClientResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__registerClientResponse, sizeof(struct fw__registerClientResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__registerClientResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__registerClientResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__registerClientResponse, 0, sizeof(struct fw__registerClientResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__registerClientResponse(struct soap *soap, const struct fw__registerClientResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__registerClientResponse);
	if (soap_out_fw__registerClientResponse(soap, tag?tag:"fw:registerClientResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__registerClientResponse * SOAP_FMAC4 soap_get_fw__registerClientResponse(struct soap *soap, struct fw__registerClientResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__registerClientResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__registerClientResponse * SOAP_FMAC2 soap_instantiate_fw__registerClientResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__registerClientResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__registerClientResponse, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__registerClientResponse);
		if (size)
			*size = sizeof(struct fw__registerClientResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__registerClientResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__registerClientResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__registerClientResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__registerClientResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__registerClientResponse %p -> %p\n", q, p));
	*(struct fw__registerClientResponse*)p = *(struct fw__registerClientResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__reservePort(struct soap *soap, struct fw__reservePort *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->clientName);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__reservePort(struct soap *soap, const struct fw__reservePort *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->clientName, SOAP_TYPE_cds_std__string);
	soap_serialize_std__string(soap, &a->clientName);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__reservePort(struct soap *soap, const char *tag, int id, const struct fw__reservePort *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__reservePort), type))
		return soap->error;
	if (soap_out_std__string(soap, "clientName", -1, &a->clientName, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__reservePort * SOAP_FMAC4 soap_in_fw__reservePort(struct soap *soap, const char *tag, struct fw__reservePort *a, const char *type)
{
	size_t soap_flag_clientName = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__reservePort *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__reservePort, sizeof(struct fw__reservePort), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_fw__reservePort(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_clientName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "clientName", &a->clientName, "xsd:string"))
				{	soap_flag_clientName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__reservePort *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__reservePort, 0, sizeof(struct fw__reservePort), 0, soap_copy_fw__reservePort);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_clientName > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__reservePort(struct soap *soap, const struct fw__reservePort *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__reservePort);
	if (soap_out_fw__reservePort(soap, tag?tag:"fw:reservePort", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__reservePort * SOAP_FMAC4 soap_get_fw__reservePort(struct soap *soap, struct fw__reservePort *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__reservePort(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__reservePort * SOAP_FMAC2 soap_instantiate_fw__reservePort(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__reservePort(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__reservePort, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__reservePort);
		if (size)
			*size = sizeof(struct fw__reservePort);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__reservePort[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__reservePort);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__reservePort*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__reservePort(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__reservePort %p -> %p\n", q, p));
	*(struct fw__reservePort*)p = *(struct fw__reservePort*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__reservePortResponse(struct soap *soap, struct fw__reservePortResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->return_);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__reservePortResponse(struct soap *soap, const struct fw__reservePortResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->return_, SOAP_TYPE_cds_int);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__reservePortResponse(struct soap *soap, const char *tag, int id, const struct fw__reservePortResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__reservePortResponse), type))
		return soap->error;
	if (soap_out_int(soap, "return", -1, &a->return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__reservePortResponse * SOAP_FMAC4 soap_in_fw__reservePortResponse(struct soap *soap, const char *tag, struct fw__reservePortResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__reservePortResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__reservePortResponse, sizeof(struct fw__reservePortResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__reservePortResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "return", &a->return_, "xsd:int"))
				{	soap_flag_return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__reservePortResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__reservePortResponse, 0, sizeof(struct fw__reservePortResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_return_ > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__reservePortResponse(struct soap *soap, const struct fw__reservePortResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__reservePortResponse);
	if (soap_out_fw__reservePortResponse(soap, tag?tag:"fw:reservePortResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__reservePortResponse * SOAP_FMAC4 soap_get_fw__reservePortResponse(struct soap *soap, struct fw__reservePortResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__reservePortResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__reservePortResponse * SOAP_FMAC2 soap_instantiate_fw__reservePortResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__reservePortResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__reservePortResponse, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__reservePortResponse);
		if (size)
			*size = sizeof(struct fw__reservePortResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__reservePortResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__reservePortResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__reservePortResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__reservePortResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__reservePortResponse %p -> %p\n", q, p));
	*(struct fw__reservePortResponse*)p = *(struct fw__reservePortResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__deselectEntity(struct soap *soap, struct fw__deselectEntity *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &a->entityId);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__deselectEntity(struct soap *soap, const struct fw__deselectEntity *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->entityId, SOAP_TYPE_cds_LONG64);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__deselectEntity(struct soap *soap, const char *tag, int id, const struct fw__deselectEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__deselectEntity), type))
		return soap->error;
	if (soap_out_LONG64(soap, "entityId", -1, &a->entityId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__deselectEntity * SOAP_FMAC4 soap_in_fw__deselectEntity(struct soap *soap, const char *tag, struct fw__deselectEntity *a, const char *type)
{
	size_t soap_flag_entityId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__deselectEntity *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__deselectEntity, sizeof(struct fw__deselectEntity), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__deselectEntity(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_entityId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "entityId", &a->entityId, "xsd:long"))
				{	soap_flag_entityId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__deselectEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__deselectEntity, 0, sizeof(struct fw__deselectEntity), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_entityId > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__deselectEntity(struct soap *soap, const struct fw__deselectEntity *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__deselectEntity);
	if (soap_out_fw__deselectEntity(soap, tag?tag:"fw:deselectEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__deselectEntity * SOAP_FMAC4 soap_get_fw__deselectEntity(struct soap *soap, struct fw__deselectEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__deselectEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__deselectEntity * SOAP_FMAC2 soap_instantiate_fw__deselectEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__deselectEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__deselectEntity, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__deselectEntity);
		if (size)
			*size = sizeof(struct fw__deselectEntity);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__deselectEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__deselectEntity);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__deselectEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__deselectEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__deselectEntity %p -> %p\n", q, p));
	*(struct fw__deselectEntity*)p = *(struct fw__deselectEntity*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__deselectEntityResponse(struct soap *soap, struct fw__deselectEntityResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__deselectEntityResponse(struct soap *soap, const struct fw__deselectEntityResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__deselectEntityResponse(struct soap *soap, const char *tag, int id, const struct fw__deselectEntityResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__deselectEntityResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__deselectEntityResponse * SOAP_FMAC4 soap_in_fw__deselectEntityResponse(struct soap *soap, const char *tag, struct fw__deselectEntityResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__deselectEntityResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__deselectEntityResponse, sizeof(struct fw__deselectEntityResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__deselectEntityResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__deselectEntityResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__deselectEntityResponse, 0, sizeof(struct fw__deselectEntityResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__deselectEntityResponse(struct soap *soap, const struct fw__deselectEntityResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__deselectEntityResponse);
	if (soap_out_fw__deselectEntityResponse(soap, tag?tag:"fw:deselectEntityResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__deselectEntityResponse * SOAP_FMAC4 soap_get_fw__deselectEntityResponse(struct soap *soap, struct fw__deselectEntityResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__deselectEntityResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__deselectEntityResponse * SOAP_FMAC2 soap_instantiate_fw__deselectEntityResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__deselectEntityResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__deselectEntityResponse, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__deselectEntityResponse);
		if (size)
			*size = sizeof(struct fw__deselectEntityResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__deselectEntityResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__deselectEntityResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__deselectEntityResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__deselectEntityResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__deselectEntityResponse %p -> %p\n", q, p));
	*(struct fw__deselectEntityResponse*)p = *(struct fw__deselectEntityResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__selectEntity(struct soap *soap, struct fw__selectEntity *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &a->_entityId);
	soap_default_bool(soap, &a->_clearAll);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__selectEntity(struct soap *soap, const struct fw__selectEntity *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->_entityId, SOAP_TYPE_cds_LONG64);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__selectEntity(struct soap *soap, const char *tag, int id, const struct fw__selectEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__selectEntity), type))
		return soap->error;
	if (soap_out_LONG64(soap, "entityId", -1, &a->_entityId, ""))
		return soap->error;
	if (soap_out_bool(soap, "clearAll", -1, &a->_clearAll, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__selectEntity * SOAP_FMAC4 soap_in_fw__selectEntity(struct soap *soap, const char *tag, struct fw__selectEntity *a, const char *type)
{
	size_t soap_flag__entityId = 1;
	size_t soap_flag__clearAll = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__selectEntity *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__selectEntity, sizeof(struct fw__selectEntity), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__selectEntity(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__entityId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, NULL, &a->_entityId, "xsd:long"))
				{	soap_flag__entityId--;
					continue;
				}
			if (soap_flag__clearAll && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, NULL, &a->_clearAll, "xsd:boolean"))
				{	soap_flag__clearAll--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__selectEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__selectEntity, 0, sizeof(struct fw__selectEntity), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__entityId > 0 || soap_flag__clearAll > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__selectEntity(struct soap *soap, const struct fw__selectEntity *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__selectEntity);
	if (soap_out_fw__selectEntity(soap, tag?tag:"fw:selectEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__selectEntity * SOAP_FMAC4 soap_get_fw__selectEntity(struct soap *soap, struct fw__selectEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__selectEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__selectEntity * SOAP_FMAC2 soap_instantiate_fw__selectEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__selectEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__selectEntity, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__selectEntity);
		if (size)
			*size = sizeof(struct fw__selectEntity);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__selectEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__selectEntity);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__selectEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__selectEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__selectEntity %p -> %p\n", q, p));
	*(struct fw__selectEntity*)p = *(struct fw__selectEntity*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__selectEntityResponse(struct soap *soap, struct fw__selectEntityResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__selectEntityResponse(struct soap *soap, const struct fw__selectEntityResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__selectEntityResponse(struct soap *soap, const char *tag, int id, const struct fw__selectEntityResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__selectEntityResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__selectEntityResponse * SOAP_FMAC4 soap_in_fw__selectEntityResponse(struct soap *soap, const char *tag, struct fw__selectEntityResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__selectEntityResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__selectEntityResponse, sizeof(struct fw__selectEntityResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__selectEntityResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__selectEntityResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__selectEntityResponse, 0, sizeof(struct fw__selectEntityResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__selectEntityResponse(struct soap *soap, const struct fw__selectEntityResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__selectEntityResponse);
	if (soap_out_fw__selectEntityResponse(soap, tag?tag:"fw:selectEntityResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__selectEntityResponse * SOAP_FMAC4 soap_get_fw__selectEntityResponse(struct soap *soap, struct fw__selectEntityResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__selectEntityResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__selectEntityResponse * SOAP_FMAC2 soap_instantiate_fw__selectEntityResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__selectEntityResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__selectEntityResponse, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__selectEntityResponse);
		if (size)
			*size = sizeof(struct fw__selectEntityResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__selectEntityResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__selectEntityResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__selectEntityResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__selectEntityResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__selectEntityResponse %p -> %p\n", q, p));
	*(struct fw__selectEntityResponse*)p = *(struct fw__selectEntityResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getUserAnnotationColor(struct soap *soap, struct fw__getUserAnnotationColor *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->username);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getUserAnnotationColor(struct soap *soap, const struct fw__getUserAnnotationColor *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->username, SOAP_TYPE_cds_std__string);
	soap_serialize_std__string(soap, &a->username);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getUserAnnotationColor(struct soap *soap, const char *tag, int id, const struct fw__getUserAnnotationColor *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getUserAnnotationColor), type))
		return soap->error;
	if (soap_out_std__string(soap, "username", -1, &a->username, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getUserAnnotationColor * SOAP_FMAC4 soap_in_fw__getUserAnnotationColor(struct soap *soap, const char *tag, struct fw__getUserAnnotationColor *a, const char *type)
{
	size_t soap_flag_username = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getUserAnnotationColor *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getUserAnnotationColor, sizeof(struct fw__getUserAnnotationColor), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_fw__getUserAnnotationColor(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_username && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "username", &a->username, "xsd:string"))
				{	soap_flag_username--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getUserAnnotationColor *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getUserAnnotationColor, 0, sizeof(struct fw__getUserAnnotationColor), 0, soap_copy_fw__getUserAnnotationColor);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_username > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getUserAnnotationColor(struct soap *soap, const struct fw__getUserAnnotationColor *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getUserAnnotationColor);
	if (soap_out_fw__getUserAnnotationColor(soap, tag?tag:"fw:getUserAnnotationColor", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getUserAnnotationColor * SOAP_FMAC4 soap_get_fw__getUserAnnotationColor(struct soap *soap, struct fw__getUserAnnotationColor *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getUserAnnotationColor(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getUserAnnotationColor * SOAP_FMAC2 soap_instantiate_fw__getUserAnnotationColor(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getUserAnnotationColor(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getUserAnnotationColor, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getUserAnnotationColor);
		if (size)
			*size = sizeof(struct fw__getUserAnnotationColor);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getUserAnnotationColor[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getUserAnnotationColor);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getUserAnnotationColor*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getUserAnnotationColor(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getUserAnnotationColor %p -> %p\n", q, p));
	*(struct fw__getUserAnnotationColor*)p = *(struct fw__getUserAnnotationColor*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getUserAnnotationColorResponse(struct soap *soap, struct fw__getUserAnnotationColorResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->return_);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getUserAnnotationColorResponse(struct soap *soap, const struct fw__getUserAnnotationColorResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->return_, SOAP_TYPE_cds_std__string);
	soap_serialize_std__string(soap, &a->return_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getUserAnnotationColorResponse(struct soap *soap, const char *tag, int id, const struct fw__getUserAnnotationColorResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getUserAnnotationColorResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "return", -1, &a->return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getUserAnnotationColorResponse * SOAP_FMAC4 soap_in_fw__getUserAnnotationColorResponse(struct soap *soap, const char *tag, struct fw__getUserAnnotationColorResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getUserAnnotationColorResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getUserAnnotationColorResponse, sizeof(struct fw__getUserAnnotationColorResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_fw__getUserAnnotationColorResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "return", &a->return_, "xsd:string"))
				{	soap_flag_return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getUserAnnotationColorResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getUserAnnotationColorResponse, 0, sizeof(struct fw__getUserAnnotationColorResponse), 0, soap_copy_fw__getUserAnnotationColorResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_return_ > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getUserAnnotationColorResponse(struct soap *soap, const struct fw__getUserAnnotationColorResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getUserAnnotationColorResponse);
	if (soap_out_fw__getUserAnnotationColorResponse(soap, tag?tag:"fw:getUserAnnotationColorResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getUserAnnotationColorResponse * SOAP_FMAC4 soap_get_fw__getUserAnnotationColorResponse(struct soap *soap, struct fw__getUserAnnotationColorResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getUserAnnotationColorResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getUserAnnotationColorResponse * SOAP_FMAC2 soap_instantiate_fw__getUserAnnotationColorResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getUserAnnotationColorResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getUserAnnotationColorResponse, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getUserAnnotationColorResponse);
		if (size)
			*size = sizeof(struct fw__getUserAnnotationColorResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getUserAnnotationColorResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getUserAnnotationColorResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getUserAnnotationColorResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getUserAnnotationColorResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getUserAnnotationColorResponse %p -> %p\n", q, p));
	*(struct fw__getUserAnnotationColorResponse*)p = *(struct fw__getUserAnnotationColorResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getAncestorWithType(struct soap *soap, struct fw__getAncestorWithType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &a->_entityId);
	soap_default_std__string(soap, &a->_type);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getAncestorWithType(struct soap *soap, const struct fw__getAncestorWithType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->_entityId, SOAP_TYPE_cds_LONG64);
	soap_embedded(soap, &a->_type, SOAP_TYPE_cds_std__string);
	soap_serialize_std__string(soap, &a->_type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getAncestorWithType(struct soap *soap, const char *tag, int id, const struct fw__getAncestorWithType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getAncestorWithType), type))
		return soap->error;
	if (soap_out_LONG64(soap, "entityId", -1, &a->_entityId, ""))
		return soap->error;
	if (soap_out_std__string(soap, "type", -1, &a->_type, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getAncestorWithType * SOAP_FMAC4 soap_in_fw__getAncestorWithType(struct soap *soap, const char *tag, struct fw__getAncestorWithType *a, const char *type)
{
	size_t soap_flag__entityId = 1;
	size_t soap_flag__type = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getAncestorWithType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getAncestorWithType, sizeof(struct fw__getAncestorWithType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_fw__getAncestorWithType(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__entityId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, NULL, &a->_entityId, "xsd:long"))
				{	soap_flag__entityId--;
					continue;
				}
			if (soap_flag__type && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_type, "xsd:string"))
				{	soap_flag__type--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getAncestorWithType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getAncestorWithType, 0, sizeof(struct fw__getAncestorWithType), 0, soap_copy_fw__getAncestorWithType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__entityId > 0 || soap_flag__type > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getAncestorWithType(struct soap *soap, const struct fw__getAncestorWithType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getAncestorWithType);
	if (soap_out_fw__getAncestorWithType(soap, tag?tag:"fw:getAncestorWithType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getAncestorWithType * SOAP_FMAC4 soap_get_fw__getAncestorWithType(struct soap *soap, struct fw__getAncestorWithType *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getAncestorWithType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getAncestorWithType * SOAP_FMAC2 soap_instantiate_fw__getAncestorWithType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getAncestorWithType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getAncestorWithType, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getAncestorWithType);
		if (size)
			*size = sizeof(struct fw__getAncestorWithType);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getAncestorWithType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getAncestorWithType);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getAncestorWithType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getAncestorWithType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getAncestorWithType %p -> %p\n", q, p));
	*(struct fw__getAncestorWithType*)p = *(struct fw__getAncestorWithType*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getAncestorWithTypeResponse(struct soap *soap, struct fw__getAncestorWithTypeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getAncestorWithTypeResponse(struct soap *soap, const struct fw__getAncestorWithTypeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTofw__entity(soap, &a->_return_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getAncestorWithTypeResponse(struct soap *soap, const char *tag, int id, const struct fw__getAncestorWithTypeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getAncestorWithTypeResponse), type))
		return soap->error;
	if (soap_out_PointerTofw__entity(soap, "return", -1, &a->_return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getAncestorWithTypeResponse * SOAP_FMAC4 soap_in_fw__getAncestorWithTypeResponse(struct soap *soap, const char *tag, struct fw__getAncestorWithTypeResponse *a, const char *type)
{
	size_t soap_flag__return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getAncestorWithTypeResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getAncestorWithTypeResponse, sizeof(struct fw__getAncestorWithTypeResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getAncestorWithTypeResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTofw__entity(soap, NULL, &a->_return_, "fw:entity"))
				{	soap_flag__return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getAncestorWithTypeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getAncestorWithTypeResponse, 0, sizeof(struct fw__getAncestorWithTypeResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getAncestorWithTypeResponse(struct soap *soap, const struct fw__getAncestorWithTypeResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getAncestorWithTypeResponse);
	if (soap_out_fw__getAncestorWithTypeResponse(soap, tag?tag:"fw:getAncestorWithTypeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getAncestorWithTypeResponse * SOAP_FMAC4 soap_get_fw__getAncestorWithTypeResponse(struct soap *soap, struct fw__getAncestorWithTypeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getAncestorWithTypeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getAncestorWithTypeResponse * SOAP_FMAC2 soap_instantiate_fw__getAncestorWithTypeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getAncestorWithTypeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getAncestorWithTypeResponse, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getAncestorWithTypeResponse);
		if (size)
			*size = sizeof(struct fw__getAncestorWithTypeResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getAncestorWithTypeResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getAncestorWithTypeResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getAncestorWithTypeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getAncestorWithTypeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getAncestorWithTypeResponse %p -> %p\n", q, p));
	*(struct fw__getAncestorWithTypeResponse*)p = *(struct fw__getAncestorWithTypeResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getAnnotationsForEntities(struct soap *soap, struct fw__getAnnotationsForEntities *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->entityIds = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getAnnotationsForEntities(struct soap *soap, const struct fw__getAnnotationsForEntities *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons2__longArray(soap, &a->entityIds);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getAnnotationsForEntities(struct soap *soap, const char *tag, int id, const struct fw__getAnnotationsForEntities *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getAnnotationsForEntities), type))
		return soap->error;
	if (soap_out_PointerTons2__longArray(soap, "entityIds", -1, &a->entityIds, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getAnnotationsForEntities * SOAP_FMAC4 soap_in_fw__getAnnotationsForEntities(struct soap *soap, const char *tag, struct fw__getAnnotationsForEntities *a, const char *type)
{
	size_t soap_flag_entityIds = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getAnnotationsForEntities *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getAnnotationsForEntities, sizeof(struct fw__getAnnotationsForEntities), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getAnnotationsForEntities(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_entityIds && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__longArray(soap, "entityIds", &a->entityIds, "ns2:longArray"))
				{	soap_flag_entityIds--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getAnnotationsForEntities *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getAnnotationsForEntities, 0, sizeof(struct fw__getAnnotationsForEntities), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getAnnotationsForEntities(struct soap *soap, const struct fw__getAnnotationsForEntities *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getAnnotationsForEntities);
	if (soap_out_fw__getAnnotationsForEntities(soap, tag?tag:"fw:getAnnotationsForEntities", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getAnnotationsForEntities * SOAP_FMAC4 soap_get_fw__getAnnotationsForEntities(struct soap *soap, struct fw__getAnnotationsForEntities *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getAnnotationsForEntities(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getAnnotationsForEntities * SOAP_FMAC2 soap_instantiate_fw__getAnnotationsForEntities(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getAnnotationsForEntities(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getAnnotationsForEntities, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getAnnotationsForEntities);
		if (size)
			*size = sizeof(struct fw__getAnnotationsForEntities);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getAnnotationsForEntities[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getAnnotationsForEntities);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getAnnotationsForEntities*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getAnnotationsForEntities(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getAnnotationsForEntities %p -> %p\n", q, p));
	*(struct fw__getAnnotationsForEntities*)p = *(struct fw__getAnnotationsForEntities*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getAnnotationsForEntitiesResponse(struct soap *soap, struct fw__getAnnotationsForEntitiesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getAnnotationsForEntitiesResponse(struct soap *soap, const struct fw__getAnnotationsForEntitiesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTofw__entityArray(soap, &a->return_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getAnnotationsForEntitiesResponse(struct soap *soap, const char *tag, int id, const struct fw__getAnnotationsForEntitiesResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getAnnotationsForEntitiesResponse), type))
		return soap->error;
	if (soap_out_PointerTofw__entityArray(soap, "return", -1, &a->return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getAnnotationsForEntitiesResponse * SOAP_FMAC4 soap_in_fw__getAnnotationsForEntitiesResponse(struct soap *soap, const char *tag, struct fw__getAnnotationsForEntitiesResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getAnnotationsForEntitiesResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getAnnotationsForEntitiesResponse, sizeof(struct fw__getAnnotationsForEntitiesResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getAnnotationsForEntitiesResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTofw__entityArray(soap, "return", &a->return_, "fw:entityArray"))
				{	soap_flag_return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getAnnotationsForEntitiesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getAnnotationsForEntitiesResponse, 0, sizeof(struct fw__getAnnotationsForEntitiesResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getAnnotationsForEntitiesResponse(struct soap *soap, const struct fw__getAnnotationsForEntitiesResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getAnnotationsForEntitiesResponse);
	if (soap_out_fw__getAnnotationsForEntitiesResponse(soap, tag?tag:"fw:getAnnotationsForEntitiesResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getAnnotationsForEntitiesResponse * SOAP_FMAC4 soap_get_fw__getAnnotationsForEntitiesResponse(struct soap *soap, struct fw__getAnnotationsForEntitiesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getAnnotationsForEntitiesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getAnnotationsForEntitiesResponse * SOAP_FMAC2 soap_instantiate_fw__getAnnotationsForEntitiesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getAnnotationsForEntitiesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getAnnotationsForEntitiesResponse, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getAnnotationsForEntitiesResponse);
		if (size)
			*size = sizeof(struct fw__getAnnotationsForEntitiesResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getAnnotationsForEntitiesResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getAnnotationsForEntitiesResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getAnnotationsForEntitiesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getAnnotationsForEntitiesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getAnnotationsForEntitiesResponse %p -> %p\n", q, p));
	*(struct fw__getAnnotationsForEntitiesResponse*)p = *(struct fw__getAnnotationsForEntitiesResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getAnnotationsForEntity(struct soap *soap, struct fw__getAnnotationsForEntity *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &a->entityId);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getAnnotationsForEntity(struct soap *soap, const struct fw__getAnnotationsForEntity *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->entityId, SOAP_TYPE_cds_LONG64);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getAnnotationsForEntity(struct soap *soap, const char *tag, int id, const struct fw__getAnnotationsForEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getAnnotationsForEntity), type))
		return soap->error;
	if (soap_out_LONG64(soap, "entityId", -1, &a->entityId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getAnnotationsForEntity * SOAP_FMAC4 soap_in_fw__getAnnotationsForEntity(struct soap *soap, const char *tag, struct fw__getAnnotationsForEntity *a, const char *type)
{
	size_t soap_flag_entityId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getAnnotationsForEntity *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getAnnotationsForEntity, sizeof(struct fw__getAnnotationsForEntity), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getAnnotationsForEntity(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_entityId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "entityId", &a->entityId, "xsd:long"))
				{	soap_flag_entityId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getAnnotationsForEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getAnnotationsForEntity, 0, sizeof(struct fw__getAnnotationsForEntity), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_entityId > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getAnnotationsForEntity(struct soap *soap, const struct fw__getAnnotationsForEntity *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getAnnotationsForEntity);
	if (soap_out_fw__getAnnotationsForEntity(soap, tag?tag:"fw:getAnnotationsForEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getAnnotationsForEntity * SOAP_FMAC4 soap_get_fw__getAnnotationsForEntity(struct soap *soap, struct fw__getAnnotationsForEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getAnnotationsForEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getAnnotationsForEntity * SOAP_FMAC2 soap_instantiate_fw__getAnnotationsForEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getAnnotationsForEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getAnnotationsForEntity, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getAnnotationsForEntity);
		if (size)
			*size = sizeof(struct fw__getAnnotationsForEntity);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getAnnotationsForEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getAnnotationsForEntity);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getAnnotationsForEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getAnnotationsForEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getAnnotationsForEntity %p -> %p\n", q, p));
	*(struct fw__getAnnotationsForEntity*)p = *(struct fw__getAnnotationsForEntity*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getAnnotationsForEntityResponse(struct soap *soap, struct fw__getAnnotationsForEntityResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getAnnotationsForEntityResponse(struct soap *soap, const struct fw__getAnnotationsForEntityResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTofw__entityArray(soap, &a->return_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getAnnotationsForEntityResponse(struct soap *soap, const char *tag, int id, const struct fw__getAnnotationsForEntityResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getAnnotationsForEntityResponse), type))
		return soap->error;
	if (soap_out_PointerTofw__entityArray(soap, "return", -1, &a->return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getAnnotationsForEntityResponse * SOAP_FMAC4 soap_in_fw__getAnnotationsForEntityResponse(struct soap *soap, const char *tag, struct fw__getAnnotationsForEntityResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getAnnotationsForEntityResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getAnnotationsForEntityResponse, sizeof(struct fw__getAnnotationsForEntityResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getAnnotationsForEntityResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTofw__entityArray(soap, "return", &a->return_, "fw:entityArray"))
				{	soap_flag_return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getAnnotationsForEntityResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getAnnotationsForEntityResponse, 0, sizeof(struct fw__getAnnotationsForEntityResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getAnnotationsForEntityResponse(struct soap *soap, const struct fw__getAnnotationsForEntityResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getAnnotationsForEntityResponse);
	if (soap_out_fw__getAnnotationsForEntityResponse(soap, tag?tag:"fw:getAnnotationsForEntityResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getAnnotationsForEntityResponse * SOAP_FMAC4 soap_get_fw__getAnnotationsForEntityResponse(struct soap *soap, struct fw__getAnnotationsForEntityResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getAnnotationsForEntityResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getAnnotationsForEntityResponse * SOAP_FMAC2 soap_instantiate_fw__getAnnotationsForEntityResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getAnnotationsForEntityResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getAnnotationsForEntityResponse, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getAnnotationsForEntityResponse);
		if (size)
			*size = sizeof(struct fw__getAnnotationsForEntityResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getAnnotationsForEntityResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getAnnotationsForEntityResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getAnnotationsForEntityResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getAnnotationsForEntityResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getAnnotationsForEntityResponse %p -> %p\n", q, p));
	*(struct fw__getAnnotationsForEntityResponse*)p = *(struct fw__getAnnotationsForEntityResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getEntityTree(struct soap *soap, struct fw__getEntityTree *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &a->entityId);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getEntityTree(struct soap *soap, const struct fw__getEntityTree *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->entityId, SOAP_TYPE_cds_LONG64);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getEntityTree(struct soap *soap, const char *tag, int id, const struct fw__getEntityTree *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getEntityTree), type))
		return soap->error;
	if (soap_out_LONG64(soap, "entityId", -1, &a->entityId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getEntityTree * SOAP_FMAC4 soap_in_fw__getEntityTree(struct soap *soap, const char *tag, struct fw__getEntityTree *a, const char *type)
{
	size_t soap_flag_entityId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getEntityTree *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getEntityTree, sizeof(struct fw__getEntityTree), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getEntityTree(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_entityId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "entityId", &a->entityId, "xsd:long"))
				{	soap_flag_entityId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getEntityTree *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getEntityTree, 0, sizeof(struct fw__getEntityTree), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_entityId > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getEntityTree(struct soap *soap, const struct fw__getEntityTree *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getEntityTree);
	if (soap_out_fw__getEntityTree(soap, tag?tag:"fw:getEntityTree", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getEntityTree * SOAP_FMAC4 soap_get_fw__getEntityTree(struct soap *soap, struct fw__getEntityTree *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getEntityTree(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getEntityTree * SOAP_FMAC2 soap_instantiate_fw__getEntityTree(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getEntityTree(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getEntityTree, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getEntityTree);
		if (size)
			*size = sizeof(struct fw__getEntityTree);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getEntityTree[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getEntityTree);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getEntityTree*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getEntityTree(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getEntityTree %p -> %p\n", q, p));
	*(struct fw__getEntityTree*)p = *(struct fw__getEntityTree*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getEntityTreeResponse(struct soap *soap, struct fw__getEntityTreeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getEntityTreeResponse(struct soap *soap, const struct fw__getEntityTreeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTofw__entity(soap, &a->return_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getEntityTreeResponse(struct soap *soap, const char *tag, int id, const struct fw__getEntityTreeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getEntityTreeResponse), type))
		return soap->error;
	if (soap_out_PointerTofw__entity(soap, "return", -1, &a->return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getEntityTreeResponse * SOAP_FMAC4 soap_in_fw__getEntityTreeResponse(struct soap *soap, const char *tag, struct fw__getEntityTreeResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getEntityTreeResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getEntityTreeResponse, sizeof(struct fw__getEntityTreeResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getEntityTreeResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTofw__entity(soap, "return", &a->return_, "fw:entity"))
				{	soap_flag_return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getEntityTreeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getEntityTreeResponse, 0, sizeof(struct fw__getEntityTreeResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getEntityTreeResponse(struct soap *soap, const struct fw__getEntityTreeResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getEntityTreeResponse);
	if (soap_out_fw__getEntityTreeResponse(soap, tag?tag:"fw:getEntityTreeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getEntityTreeResponse * SOAP_FMAC4 soap_get_fw__getEntityTreeResponse(struct soap *soap, struct fw__getEntityTreeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getEntityTreeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getEntityTreeResponse * SOAP_FMAC2 soap_instantiate_fw__getEntityTreeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getEntityTreeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getEntityTreeResponse, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getEntityTreeResponse);
		if (size)
			*size = sizeof(struct fw__getEntityTreeResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getEntityTreeResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getEntityTreeResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getEntityTreeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getEntityTreeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getEntityTreeResponse %p -> %p\n", q, p));
	*(struct fw__getEntityTreeResponse*)p = *(struct fw__getEntityTreeResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getEntityAndChildren(struct soap *soap, struct fw__getEntityAndChildren *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &a->entityId);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getEntityAndChildren(struct soap *soap, const struct fw__getEntityAndChildren *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->entityId, SOAP_TYPE_cds_LONG64);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getEntityAndChildren(struct soap *soap, const char *tag, int id, const struct fw__getEntityAndChildren *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getEntityAndChildren), type))
		return soap->error;
	if (soap_out_LONG64(soap, "entityId", -1, &a->entityId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getEntityAndChildren * SOAP_FMAC4 soap_in_fw__getEntityAndChildren(struct soap *soap, const char *tag, struct fw__getEntityAndChildren *a, const char *type)
{
	size_t soap_flag_entityId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getEntityAndChildren *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getEntityAndChildren, sizeof(struct fw__getEntityAndChildren), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getEntityAndChildren(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_entityId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "entityId", &a->entityId, "xsd:long"))
				{	soap_flag_entityId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getEntityAndChildren *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getEntityAndChildren, 0, sizeof(struct fw__getEntityAndChildren), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_entityId > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getEntityAndChildren(struct soap *soap, const struct fw__getEntityAndChildren *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getEntityAndChildren);
	if (soap_out_fw__getEntityAndChildren(soap, tag?tag:"fw:getEntityAndChildren", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getEntityAndChildren * SOAP_FMAC4 soap_get_fw__getEntityAndChildren(struct soap *soap, struct fw__getEntityAndChildren *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getEntityAndChildren(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getEntityAndChildren * SOAP_FMAC2 soap_instantiate_fw__getEntityAndChildren(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getEntityAndChildren(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getEntityAndChildren, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getEntityAndChildren);
		if (size)
			*size = sizeof(struct fw__getEntityAndChildren);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getEntityAndChildren[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getEntityAndChildren);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getEntityAndChildren*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getEntityAndChildren(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getEntityAndChildren %p -> %p\n", q, p));
	*(struct fw__getEntityAndChildren*)p = *(struct fw__getEntityAndChildren*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getEntityAndChildrenResponse(struct soap *soap, struct fw__getEntityAndChildrenResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getEntityAndChildrenResponse(struct soap *soap, const struct fw__getEntityAndChildrenResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTofw__entity(soap, &a->return_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getEntityAndChildrenResponse(struct soap *soap, const char *tag, int id, const struct fw__getEntityAndChildrenResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getEntityAndChildrenResponse), type))
		return soap->error;
	if (soap_out_PointerTofw__entity(soap, "return", -1, &a->return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getEntityAndChildrenResponse * SOAP_FMAC4 soap_in_fw__getEntityAndChildrenResponse(struct soap *soap, const char *tag, struct fw__getEntityAndChildrenResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getEntityAndChildrenResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getEntityAndChildrenResponse, sizeof(struct fw__getEntityAndChildrenResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getEntityAndChildrenResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTofw__entity(soap, "return", &a->return_, "fw:entity"))
				{	soap_flag_return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getEntityAndChildrenResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getEntityAndChildrenResponse, 0, sizeof(struct fw__getEntityAndChildrenResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getEntityAndChildrenResponse(struct soap *soap, const struct fw__getEntityAndChildrenResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getEntityAndChildrenResponse);
	if (soap_out_fw__getEntityAndChildrenResponse(soap, tag?tag:"fw:getEntityAndChildrenResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getEntityAndChildrenResponse * SOAP_FMAC4 soap_get_fw__getEntityAndChildrenResponse(struct soap *soap, struct fw__getEntityAndChildrenResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getEntityAndChildrenResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getEntityAndChildrenResponse * SOAP_FMAC2 soap_instantiate_fw__getEntityAndChildrenResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getEntityAndChildrenResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getEntityAndChildrenResponse, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getEntityAndChildrenResponse);
		if (size)
			*size = sizeof(struct fw__getEntityAndChildrenResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getEntityAndChildrenResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getEntityAndChildrenResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getEntityAndChildrenResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getEntityAndChildrenResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getEntityAndChildrenResponse %p -> %p\n", q, p));
	*(struct fw__getEntityAndChildrenResponse*)p = *(struct fw__getEntityAndChildrenResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getAnnotationSession(struct soap *soap, struct fw__getAnnotationSession *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &a->sessionId);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getAnnotationSession(struct soap *soap, const struct fw__getAnnotationSession *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->sessionId, SOAP_TYPE_cds_LONG64);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getAnnotationSession(struct soap *soap, const char *tag, int id, const struct fw__getAnnotationSession *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getAnnotationSession), type))
		return soap->error;
	if (soap_out_LONG64(soap, "sessionId", -1, &a->sessionId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getAnnotationSession * SOAP_FMAC4 soap_in_fw__getAnnotationSession(struct soap *soap, const char *tag, struct fw__getAnnotationSession *a, const char *type)
{
	size_t soap_flag_sessionId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getAnnotationSession *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getAnnotationSession, sizeof(struct fw__getAnnotationSession), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getAnnotationSession(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "sessionId", &a->sessionId, "xsd:long"))
				{	soap_flag_sessionId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getAnnotationSession *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getAnnotationSession, 0, sizeof(struct fw__getAnnotationSession), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionId > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getAnnotationSession(struct soap *soap, const struct fw__getAnnotationSession *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getAnnotationSession);
	if (soap_out_fw__getAnnotationSession(soap, tag?tag:"fw:getAnnotationSession", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getAnnotationSession * SOAP_FMAC4 soap_get_fw__getAnnotationSession(struct soap *soap, struct fw__getAnnotationSession *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getAnnotationSession(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getAnnotationSession * SOAP_FMAC2 soap_instantiate_fw__getAnnotationSession(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getAnnotationSession(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getAnnotationSession, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getAnnotationSession);
		if (size)
			*size = sizeof(struct fw__getAnnotationSession);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getAnnotationSession[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getAnnotationSession);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getAnnotationSession*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getAnnotationSession(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getAnnotationSession %p -> %p\n", q, p));
	*(struct fw__getAnnotationSession*)p = *(struct fw__getAnnotationSession*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getAnnotationSessionResponse(struct soap *soap, struct fw__getAnnotationSessionResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getAnnotationSessionResponse(struct soap *soap, const struct fw__getAnnotationSessionResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTofw__annotationSession(soap, &a->return_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getAnnotationSessionResponse(struct soap *soap, const char *tag, int id, const struct fw__getAnnotationSessionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getAnnotationSessionResponse), type))
		return soap->error;
	if (soap_out_PointerTofw__annotationSession(soap, "return", -1, &a->return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getAnnotationSessionResponse * SOAP_FMAC4 soap_in_fw__getAnnotationSessionResponse(struct soap *soap, const char *tag, struct fw__getAnnotationSessionResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getAnnotationSessionResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getAnnotationSessionResponse, sizeof(struct fw__getAnnotationSessionResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getAnnotationSessionResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTofw__annotationSession(soap, "return", &a->return_, "fw:annotationSession"))
				{	soap_flag_return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getAnnotationSessionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getAnnotationSessionResponse, 0, sizeof(struct fw__getAnnotationSessionResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getAnnotationSessionResponse(struct soap *soap, const struct fw__getAnnotationSessionResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getAnnotationSessionResponse);
	if (soap_out_fw__getAnnotationSessionResponse(soap, tag?tag:"fw:getAnnotationSessionResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getAnnotationSessionResponse * SOAP_FMAC4 soap_get_fw__getAnnotationSessionResponse(struct soap *soap, struct fw__getAnnotationSessionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getAnnotationSessionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getAnnotationSessionResponse * SOAP_FMAC2 soap_instantiate_fw__getAnnotationSessionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getAnnotationSessionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getAnnotationSessionResponse, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getAnnotationSessionResponse);
		if (size)
			*size = sizeof(struct fw__getAnnotationSessionResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getAnnotationSessionResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getAnnotationSessionResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getAnnotationSessionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getAnnotationSessionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getAnnotationSessionResponse %p -> %p\n", q, p));
	*(struct fw__getAnnotationSessionResponse*)p = *(struct fw__getAnnotationSessionResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getOntology(struct soap *soap, struct fw__getOntology *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &a->rootId);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getOntology(struct soap *soap, const struct fw__getOntology *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->rootId, SOAP_TYPE_cds_LONG64);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getOntology(struct soap *soap, const char *tag, int id, const struct fw__getOntology *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getOntology), type))
		return soap->error;
	if (soap_out_LONG64(soap, "rootId", -1, &a->rootId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getOntology * SOAP_FMAC4 soap_in_fw__getOntology(struct soap *soap, const char *tag, struct fw__getOntology *a, const char *type)
{
	size_t soap_flag_rootId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getOntology *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getOntology, sizeof(struct fw__getOntology), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getOntology(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_rootId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "rootId", &a->rootId, "xsd:long"))
				{	soap_flag_rootId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getOntology *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getOntology, 0, sizeof(struct fw__getOntology), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_rootId > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getOntology(struct soap *soap, const struct fw__getOntology *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getOntology);
	if (soap_out_fw__getOntology(soap, tag?tag:"fw:getOntology", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getOntology * SOAP_FMAC4 soap_get_fw__getOntology(struct soap *soap, struct fw__getOntology *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getOntology(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getOntology * SOAP_FMAC2 soap_instantiate_fw__getOntology(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getOntology(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getOntology, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getOntology);
		if (size)
			*size = sizeof(struct fw__getOntology);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getOntology[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getOntology);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getOntology*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getOntology(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getOntology %p -> %p\n", q, p));
	*(struct fw__getOntology*)p = *(struct fw__getOntology*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getOntologyResponse(struct soap *soap, struct fw__getOntologyResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getOntologyResponse(struct soap *soap, const struct fw__getOntologyResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTofw__entity(soap, &a->return_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getOntologyResponse(struct soap *soap, const char *tag, int id, const struct fw__getOntologyResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getOntologyResponse), type))
		return soap->error;
	if (soap_out_PointerTofw__entity(soap, "return", -1, &a->return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getOntologyResponse * SOAP_FMAC4 soap_in_fw__getOntologyResponse(struct soap *soap, const char *tag, struct fw__getOntologyResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getOntologyResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getOntologyResponse, sizeof(struct fw__getOntologyResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getOntologyResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTofw__entity(soap, "return", &a->return_, "fw:entity"))
				{	soap_flag_return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getOntologyResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getOntologyResponse, 0, sizeof(struct fw__getOntologyResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getOntologyResponse(struct soap *soap, const struct fw__getOntologyResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getOntologyResponse);
	if (soap_out_fw__getOntologyResponse(soap, tag?tag:"fw:getOntologyResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getOntologyResponse * SOAP_FMAC4 soap_get_fw__getOntologyResponse(struct soap *soap, struct fw__getOntologyResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getOntologyResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getOntologyResponse * SOAP_FMAC2 soap_instantiate_fw__getOntologyResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getOntologyResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getOntologyResponse, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getOntologyResponse);
		if (size)
			*size = sizeof(struct fw__getOntologyResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getOntologyResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getOntologyResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getOntologyResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getOntologyResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getOntologyResponse %p -> %p\n", q, p));
	*(struct fw__getOntologyResponse*)p = *(struct fw__getOntologyResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__removeAnnotation(struct soap *soap, struct fw__removeAnnotation *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &a->annotationId);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__removeAnnotation(struct soap *soap, const struct fw__removeAnnotation *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->annotationId, SOAP_TYPE_cds_LONG64);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__removeAnnotation(struct soap *soap, const char *tag, int id, const struct fw__removeAnnotation *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__removeAnnotation), type))
		return soap->error;
	if (soap_out_LONG64(soap, "annotationId", -1, &a->annotationId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__removeAnnotation * SOAP_FMAC4 soap_in_fw__removeAnnotation(struct soap *soap, const char *tag, struct fw__removeAnnotation *a, const char *type)
{
	size_t soap_flag_annotationId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__removeAnnotation *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__removeAnnotation, sizeof(struct fw__removeAnnotation), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__removeAnnotation(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_annotationId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "annotationId", &a->annotationId, "xsd:long"))
				{	soap_flag_annotationId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__removeAnnotation *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__removeAnnotation, 0, sizeof(struct fw__removeAnnotation), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_annotationId > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__removeAnnotation(struct soap *soap, const struct fw__removeAnnotation *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__removeAnnotation);
	if (soap_out_fw__removeAnnotation(soap, tag?tag:"fw:removeAnnotation", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__removeAnnotation * SOAP_FMAC4 soap_get_fw__removeAnnotation(struct soap *soap, struct fw__removeAnnotation *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__removeAnnotation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__removeAnnotation * SOAP_FMAC2 soap_instantiate_fw__removeAnnotation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__removeAnnotation(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__removeAnnotation, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__removeAnnotation);
		if (size)
			*size = sizeof(struct fw__removeAnnotation);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__removeAnnotation[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__removeAnnotation);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__removeAnnotation*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__removeAnnotation(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__removeAnnotation %p -> %p\n", q, p));
	*(struct fw__removeAnnotation*)p = *(struct fw__removeAnnotation*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__removeAnnotationResponse(struct soap *soap, struct fw__removeAnnotationResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__removeAnnotationResponse(struct soap *soap, const struct fw__removeAnnotationResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__removeAnnotationResponse(struct soap *soap, const char *tag, int id, const struct fw__removeAnnotationResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__removeAnnotationResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__removeAnnotationResponse * SOAP_FMAC4 soap_in_fw__removeAnnotationResponse(struct soap *soap, const char *tag, struct fw__removeAnnotationResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__removeAnnotationResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__removeAnnotationResponse, sizeof(struct fw__removeAnnotationResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__removeAnnotationResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__removeAnnotationResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__removeAnnotationResponse, 0, sizeof(struct fw__removeAnnotationResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__removeAnnotationResponse(struct soap *soap, const struct fw__removeAnnotationResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__removeAnnotationResponse);
	if (soap_out_fw__removeAnnotationResponse(soap, tag?tag:"fw:removeAnnotationResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__removeAnnotationResponse * SOAP_FMAC4 soap_get_fw__removeAnnotationResponse(struct soap *soap, struct fw__removeAnnotationResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__removeAnnotationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__removeAnnotationResponse * SOAP_FMAC2 soap_instantiate_fw__removeAnnotationResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__removeAnnotationResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__removeAnnotationResponse, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__removeAnnotationResponse);
		if (size)
			*size = sizeof(struct fw__removeAnnotationResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__removeAnnotationResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__removeAnnotationResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__removeAnnotationResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__removeAnnotationResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__removeAnnotationResponse %p -> %p\n", q, p));
	*(struct fw__removeAnnotationResponse*)p = *(struct fw__removeAnnotationResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getEntityById(struct soap *soap, struct fw__getEntityById *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &a->entityId);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getEntityById(struct soap *soap, const struct fw__getEntityById *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->entityId, SOAP_TYPE_cds_LONG64);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getEntityById(struct soap *soap, const char *tag, int id, const struct fw__getEntityById *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getEntityById), type))
		return soap->error;
	if (soap_out_LONG64(soap, "entityId", -1, &a->entityId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getEntityById * SOAP_FMAC4 soap_in_fw__getEntityById(struct soap *soap, const char *tag, struct fw__getEntityById *a, const char *type)
{
	size_t soap_flag_entityId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getEntityById *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getEntityById, sizeof(struct fw__getEntityById), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getEntityById(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_entityId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "entityId", &a->entityId, "xsd:long"))
				{	soap_flag_entityId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getEntityById *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getEntityById, 0, sizeof(struct fw__getEntityById), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_entityId > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getEntityById(struct soap *soap, const struct fw__getEntityById *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getEntityById);
	if (soap_out_fw__getEntityById(soap, tag?tag:"fw:getEntityById", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getEntityById * SOAP_FMAC4 soap_get_fw__getEntityById(struct soap *soap, struct fw__getEntityById *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getEntityById(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getEntityById * SOAP_FMAC2 soap_instantiate_fw__getEntityById(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getEntityById(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getEntityById, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getEntityById);
		if (size)
			*size = sizeof(struct fw__getEntityById);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getEntityById[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getEntityById);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getEntityById*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getEntityById(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getEntityById %p -> %p\n", q, p));
	*(struct fw__getEntityById*)p = *(struct fw__getEntityById*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_fw__getEntityByIdResponse(struct soap *soap, struct fw__getEntityByIdResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fw__getEntityByIdResponse(struct soap *soap, const struct fw__getEntityByIdResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTofw__entity(soap, &a->return_);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fw__getEntityByIdResponse(struct soap *soap, const char *tag, int id, const struct fw__getEntityByIdResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_cds_fw__getEntityByIdResponse), type))
		return soap->error;
	if (soap_out_PointerTofw__entity(soap, "return", -1, &a->return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct fw__getEntityByIdResponse * SOAP_FMAC4 soap_in_fw__getEntityByIdResponse(struct soap *soap, const char *tag, struct fw__getEntityByIdResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct fw__getEntityByIdResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_cds_fw__getEntityByIdResponse, sizeof(struct fw__getEntityByIdResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_fw__getEntityByIdResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTofw__entity(soap, "return", &a->return_, "fw:entity"))
				{	soap_flag_return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct fw__getEntityByIdResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_cds_fw__getEntityByIdResponse, 0, sizeof(struct fw__getEntityByIdResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fw__getEntityByIdResponse(struct soap *soap, const struct fw__getEntityByIdResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_fw__getEntityByIdResponse);
	if (soap_out_fw__getEntityByIdResponse(soap, tag?tag:"fw:getEntityByIdResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct fw__getEntityByIdResponse * SOAP_FMAC4 soap_get_fw__getEntityByIdResponse(struct soap *soap, struct fw__getEntityByIdResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_fw__getEntityByIdResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct fw__getEntityByIdResponse * SOAP_FMAC2 soap_instantiate_fw__getEntityByIdResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_fw__getEntityByIdResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_fw__getEntityByIdResponse, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getEntityByIdResponse);
		if (size)
			*size = sizeof(struct fw__getEntityByIdResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct fw__getEntityByIdResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct fw__getEntityByIdResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct fw__getEntityByIdResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fw__getEntityByIdResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct fw__getEntityByIdResponse %p -> %p\n", q, p));
	*(struct fw__getEntityByIdResponse*)p = *(struct fw__getEntityByIdResponse*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofw__entityDataArray(struct soap *soap, fw__entityDataArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_fw__entityDataArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofw__entityDataArray(struct soap *soap, const char *tag, int id, fw__entityDataArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_fw__entityDataArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 fw__entityDataArray ** SOAP_FMAC4 soap_in_PointerTofw__entityDataArray(struct soap *soap, const char *tag, fw__entityDataArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (fw__entityDataArray **)soap_malloc(soap, sizeof(fw__entityDataArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (fw__entityDataArray *)soap_instantiate_fw__entityDataArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	fw__entityDataArray ** p = (fw__entityDataArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_fw__entityDataArray, sizeof(fw__entityDataArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofw__entityDataArray(struct soap *soap, fw__entityDataArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerTofw__entityDataArray);
	if (soap_out_PointerTofw__entityDataArray(soap, tag?tag:"fw:entityDataArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 fw__entityDataArray ** SOAP_FMAC4 soap_get_PointerTofw__entityDataArray(struct soap *soap, fw__entityDataArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTofw__entityDataArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofw__ontologyKeyBindings(struct soap *soap, fw__ontologyKeyBindings *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_fw__ontologyKeyBindings))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofw__ontologyKeyBindings(struct soap *soap, const char *tag, int id, fw__ontologyKeyBindings *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_fw__ontologyKeyBindings);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 fw__ontologyKeyBindings ** SOAP_FMAC4 soap_in_PointerTofw__ontologyKeyBindings(struct soap *soap, const char *tag, fw__ontologyKeyBindings **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (fw__ontologyKeyBindings **)soap_malloc(soap, sizeof(fw__ontologyKeyBindings *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (fw__ontologyKeyBindings *)soap_instantiate_fw__ontologyKeyBindings(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	fw__ontologyKeyBindings ** p = (fw__ontologyKeyBindings **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_fw__ontologyKeyBindings, sizeof(fw__ontologyKeyBindings), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofw__ontologyKeyBindings(struct soap *soap, fw__ontologyKeyBindings *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerTofw__ontologyKeyBindings);
	if (soap_out_PointerTofw__ontologyKeyBindings(soap, tag?tag:"fw:ontologyKeyBindings", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 fw__ontologyKeyBindings ** SOAP_FMAC4 soap_get_PointerTofw__ontologyKeyBindings(struct soap *soap, fw__ontologyKeyBindings **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTofw__ontologyKeyBindings(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofw__ontologyAnnotation(struct soap *soap, fw__ontologyAnnotation *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_fw__ontologyAnnotation))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofw__ontologyAnnotation(struct soap *soap, const char *tag, int id, fw__ontologyAnnotation *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_fw__ontologyAnnotation);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 fw__ontologyAnnotation ** SOAP_FMAC4 soap_in_PointerTofw__ontologyAnnotation(struct soap *soap, const char *tag, fw__ontologyAnnotation **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (fw__ontologyAnnotation **)soap_malloc(soap, sizeof(fw__ontologyAnnotation *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (fw__ontologyAnnotation *)soap_instantiate_fw__ontologyAnnotation(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	fw__ontologyAnnotation ** p = (fw__ontologyAnnotation **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_fw__ontologyAnnotation, sizeof(fw__ontologyAnnotation), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofw__ontologyAnnotation(struct soap *soap, fw__ontologyAnnotation *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerTofw__ontologyAnnotation);
	if (soap_out_PointerTofw__ontologyAnnotation(soap, tag?tag:"fw:ontologyAnnotation", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 fw__ontologyAnnotation ** SOAP_FMAC4 soap_get_PointerTofw__ontologyAnnotation(struct soap *soap, fw__ontologyAnnotation **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTofw__ontologyAnnotation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__longArray(struct soap *soap, ns2__longArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_ns2__longArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__longArray(struct soap *soap, const char *tag, int id, ns2__longArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_ns2__longArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns2__longArray ** SOAP_FMAC4 soap_in_PointerTons2__longArray(struct soap *soap, const char *tag, ns2__longArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__longArray **)soap_malloc(soap, sizeof(ns2__longArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__longArray *)soap_instantiate_ns2__longArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns2__longArray ** p = (ns2__longArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_ns2__longArray, sizeof(ns2__longArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__longArray(struct soap *soap, ns2__longArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerTons2__longArray);
	if (soap_out_PointerTons2__longArray(soap, tag?tag:"ns2:longArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns2__longArray ** SOAP_FMAC4 soap_get_PointerTons2__longArray(struct soap *soap, ns2__longArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__longArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofw__entityArray(struct soap *soap, fw__entityArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_fw__entityArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofw__entityArray(struct soap *soap, const char *tag, int id, fw__entityArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_fw__entityArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 fw__entityArray ** SOAP_FMAC4 soap_in_PointerTofw__entityArray(struct soap *soap, const char *tag, fw__entityArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (fw__entityArray **)soap_malloc(soap, sizeof(fw__entityArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (fw__entityArray *)soap_instantiate_fw__entityArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	fw__entityArray ** p = (fw__entityArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_fw__entityArray, sizeof(fw__entityArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofw__entityArray(struct soap *soap, fw__entityArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerTofw__entityArray);
	if (soap_out_PointerTofw__entityArray(soap, tag?tag:"fw:entityArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 fw__entityArray ** SOAP_FMAC4 soap_get_PointerTofw__entityArray(struct soap *soap, fw__entityArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTofw__entityArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofw__annotationSession(struct soap *soap, fw__annotationSession *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_fw__annotationSession))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofw__annotationSession(struct soap *soap, const char *tag, int id, fw__annotationSession *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_fw__annotationSession);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 fw__annotationSession ** SOAP_FMAC4 soap_in_PointerTofw__annotationSession(struct soap *soap, const char *tag, fw__annotationSession **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (fw__annotationSession **)soap_malloc(soap, sizeof(fw__annotationSession *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (fw__annotationSession *)soap_instantiate_fw__annotationSession(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	fw__annotationSession ** p = (fw__annotationSession **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_fw__annotationSession, sizeof(fw__annotationSession), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofw__annotationSession(struct soap *soap, fw__annotationSession *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerTofw__annotationSession);
	if (soap_out_PointerTofw__annotationSession(soap, tag?tag:"fw:annotationSession", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 fw__annotationSession ** SOAP_FMAC4 soap_get_PointerTofw__annotationSession(struct soap *soap, fw__annotationSession **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTofw__annotationSession(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_fw__ontologyKeyBindings_keyBindingSet(struct soap *soap, _fw__ontologyKeyBindings_keyBindingSet *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds__fw__ontologyKeyBindings_keyBindingSet))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_fw__ontologyKeyBindings_keyBindingSet(struct soap *soap, const char *tag, int id, _fw__ontologyKeyBindings_keyBindingSet *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds__fw__ontologyKeyBindings_keyBindingSet);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _fw__ontologyKeyBindings_keyBindingSet ** SOAP_FMAC4 soap_in_PointerTo_fw__ontologyKeyBindings_keyBindingSet(struct soap *soap, const char *tag, _fw__ontologyKeyBindings_keyBindingSet **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_fw__ontologyKeyBindings_keyBindingSet **)soap_malloc(soap, sizeof(_fw__ontologyKeyBindings_keyBindingSet *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_fw__ontologyKeyBindings_keyBindingSet *)soap_instantiate__fw__ontologyKeyBindings_keyBindingSet(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_fw__ontologyKeyBindings_keyBindingSet ** p = (_fw__ontologyKeyBindings_keyBindingSet **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds__fw__ontologyKeyBindings_keyBindingSet, sizeof(_fw__ontologyKeyBindings_keyBindingSet), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_fw__ontologyKeyBindings_keyBindingSet(struct soap *soap, _fw__ontologyKeyBindings_keyBindingSet *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerTo_fw__ontologyKeyBindings_keyBindingSet);
	if (soap_out_PointerTo_fw__ontologyKeyBindings_keyBindingSet(soap, tag?tag:"fw:ontologyKeyBindings-keyBindingSet", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _fw__ontologyKeyBindings_keyBindingSet ** SOAP_FMAC4 soap_get_PointerTo_fw__ontologyKeyBindings_keyBindingSet(struct soap *soap, _fw__ontologyKeyBindings_keyBindingSet **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_fw__ontologyKeyBindings_keyBindingSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofw__ontologyKeyBind(struct soap *soap, fw__ontologyKeyBind *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_fw__ontologyKeyBind))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofw__ontologyKeyBind(struct soap *soap, const char *tag, int id, fw__ontologyKeyBind *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_fw__ontologyKeyBind);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 fw__ontologyKeyBind ** SOAP_FMAC4 soap_in_PointerTofw__ontologyKeyBind(struct soap *soap, const char *tag, fw__ontologyKeyBind **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (fw__ontologyKeyBind **)soap_malloc(soap, sizeof(fw__ontologyKeyBind *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (fw__ontologyKeyBind *)soap_instantiate_fw__ontologyKeyBind(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	fw__ontologyKeyBind ** p = (fw__ontologyKeyBind **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_fw__ontologyKeyBind, sizeof(fw__ontologyKeyBind), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofw__ontologyKeyBind(struct soap *soap, fw__ontologyKeyBind *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerTofw__ontologyKeyBind);
	if (soap_out_PointerTofw__ontologyKeyBind(soap, tag?tag:"fw:ontologyKeyBind", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 fw__ontologyKeyBind ** SOAP_FMAC4 soap_get_PointerTofw__ontologyKeyBind(struct soap *soap, fw__ontologyKeyBind **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTofw__ontologyKeyBind(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_fw__entity_entityDataSet(struct soap *soap, _fw__entity_entityDataSet *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds__fw__entity_entityDataSet))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_fw__entity_entityDataSet(struct soap *soap, const char *tag, int id, _fw__entity_entityDataSet *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds__fw__entity_entityDataSet);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _fw__entity_entityDataSet ** SOAP_FMAC4 soap_in_PointerTo_fw__entity_entityDataSet(struct soap *soap, const char *tag, _fw__entity_entityDataSet **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_fw__entity_entityDataSet **)soap_malloc(soap, sizeof(_fw__entity_entityDataSet *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_fw__entity_entityDataSet *)soap_instantiate__fw__entity_entityDataSet(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_fw__entity_entityDataSet ** p = (_fw__entity_entityDataSet **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds__fw__entity_entityDataSet, sizeof(_fw__entity_entityDataSet), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_fw__entity_entityDataSet(struct soap *soap, _fw__entity_entityDataSet *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerTo_fw__entity_entityDataSet);
	if (soap_out_PointerTo_fw__entity_entityDataSet(soap, tag?tag:"fw:entity-entityDataSet", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _fw__entity_entityDataSet ** SOAP_FMAC4 soap_get_PointerTo_fw__entity_entityDataSet(struct soap *soap, _fw__entity_entityDataSet **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_fw__entity_entityDataSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofw__entityData(struct soap *soap, fw__entityData *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_fw__entityData))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofw__entityData(struct soap *soap, const char *tag, int id, fw__entityData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_fw__entityData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 fw__entityData ** SOAP_FMAC4 soap_in_PointerTofw__entityData(struct soap *soap, const char *tag, fw__entityData **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (fw__entityData **)soap_malloc(soap, sizeof(fw__entityData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (fw__entityData *)soap_instantiate_fw__entityData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	fw__entityData ** p = (fw__entityData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_fw__entityData, sizeof(fw__entityData), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofw__entityData(struct soap *soap, fw__entityData *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerTofw__entityData);
	if (soap_out_PointerTofw__entityData(soap, tag?tag:"fw:entityData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 fw__entityData ** SOAP_FMAC4 soap_get_PointerTofw__entityData(struct soap *soap, fw__entityData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTofw__entityData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofw__entityType(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_fw__entityType))
		soap_serialize_fw__entityType(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofw__entityType(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_fw__entityType);
	if (id < 0)
		return soap->error;
	return soap_out_fw__entityType(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTofw__entityType(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_fw__entityType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_fw__entityType, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofw__entityType(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerTofw__entityType);
	if (soap_out_PointerTofw__entityType(soap, tag?tag:"fw:entityType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTofw__entityType(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTofw__entityType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofw__entityStatus(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_fw__entityStatus))
		soap_serialize_fw__entityStatus(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofw__entityStatus(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_fw__entityStatus);
	if (id < 0)
		return soap->error;
	return soap_out_fw__entityStatus(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTofw__entityStatus(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_fw__entityStatus(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_fw__entityStatus, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofw__entityStatus(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerTofw__entityStatus);
	if (soap_out_PointerTofw__entityStatus(soap, tag?tag:"fw:entityStatus", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTofw__entityStatus(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTofw__entityStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToLONG64(struct soap *soap, LONG64 *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_cds_LONG64);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToLONG64(struct soap *soap, const char *tag, int id, LONG64 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_LONG64);
	if (id < 0)
		return soap->error;
	return soap_out_LONG64(soap, tag, id, *a, type);
}

SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_in_PointerToLONG64(struct soap *soap, const char *tag, LONG64 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (LONG64 **)soap_malloc(soap, sizeof(LONG64 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_LONG64(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (LONG64 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_LONG64, sizeof(LONG64), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToLONG64(struct soap *soap, LONG64 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerToLONG64);
	if (soap_out_PointerToLONG64(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_get_PointerToLONG64(struct soap *soap, LONG64 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToLONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_cds_int);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_int);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerToint);
	if (soap_out_PointerToint(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofw__user(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_fw__user))
		soap_serialize_fw__user(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofw__user(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_fw__user);
	if (id < 0)
		return soap->error;
	return soap_out_fw__user(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTofw__user(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_fw__user(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_fw__user, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofw__user(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerTofw__user);
	if (soap_out_PointerTofw__user(soap, tag?tag:"fw:user", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTofw__user(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTofw__user(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofw__entity(struct soap *soap, fw__entity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_fw__entity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofw__entity(struct soap *soap, const char *tag, int id, fw__entity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_fw__entity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 fw__entity ** SOAP_FMAC4 soap_in_PointerTofw__entity(struct soap *soap, const char *tag, fw__entity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (fw__entity **)soap_malloc(soap, sizeof(fw__entity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (fw__entity *)soap_instantiate_fw__entity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	fw__entity ** p = (fw__entity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_fw__entity, sizeof(fw__entity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofw__entity(struct soap *soap, fw__entity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerTofw__entity);
	if (soap_out_PointerTofw__entity(soap, tag?tag:"fw:entity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 fw__entity ** SOAP_FMAC4 soap_get_PointerTofw__entity(struct soap *soap, fw__entity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTofw__entity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofw__entityAttribute(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_cds_fw__entityAttribute))
		soap_serialize_fw__entityAttribute(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofw__entityAttribute(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_cds_fw__entityAttribute);
	if (id < 0)
		return soap->error;
	return soap_out_fw__entityAttribute(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTofw__entityAttribute(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_fw__entityAttribute(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_cds_fw__entityAttribute, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofw__entityAttribute(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_PointerTofw__entityAttribute);
	if (soap_out_PointerTofw__entityAttribute(soap, tag?tag:"fw:entityAttribute", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTofw__entityAttribute(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTofw__entityAttribute(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_cds__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_cds__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_cds_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_cds_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_cds_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_cds_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfLONG64(struct soap *soap, std::vector<LONG64 >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfLONG64(struct soap *soap, const std::vector<LONG64 >*a)
{
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfLONG64(struct soap *soap, const char *tag, int id, const std::vector<LONG64 >*a, const char *type)
{
	for (std::vector<LONG64 >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_LONG64(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<LONG64 >* SOAP_FMAC4 soap_in_std__vectorTemplateOfLONG64(struct soap *soap, const char *tag, std::vector<LONG64 >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfLONG64(soap, -1)))
		return NULL;
	LONG64 n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		soap_default_LONG64(soap, &n);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cds_LONG64, SOAP_TYPE_cds_std__vectorTemplateOfLONG64, sizeof(LONG64), 0))
				break;
			if (!soap_in_LONG64(soap, tag, NULL, "xsd:long"))
				break;
		}
		else
		{
			if (!soap_in_LONG64(soap, tag, &n, "xsd:long"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<LONG64 > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfLONG64(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfLONG64(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_std__vectorTemplateOfLONG64, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<LONG64 >);
		if (size)
			*size = sizeof(std::vector<LONG64 >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<LONG64 >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<LONG64 >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<LONG64 >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfLONG64(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<LONG64 > %p -> %p\n", q, p));
	*(std::vector<LONG64 >*)p = *(std::vector<LONG64 >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofw__entity(struct soap *soap, std::vector<fw__entity * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofw__entity(struct soap *soap, const std::vector<fw__entity * >*a)
{
	for (std::vector<fw__entity * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTofw__entity(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofw__entity(struct soap *soap, const char *tag, int id, const std::vector<fw__entity * >*a, const char *type)
{
	for (std::vector<fw__entity * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTofw__entity(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<fw__entity * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofw__entity(struct soap *soap, const char *tag, std::vector<fw__entity * >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTofw__entity(soap, -1)))
		return NULL;
	fw__entity *n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cds_fw__entity, SOAP_TYPE_cds_std__vectorTemplateOfPointerTofw__entity, sizeof(fw__entity), 1))
				break;
			if (!soap_in_PointerTofw__entity(soap, tag, NULL, "fw:entity"))
				break;
		}
		else
		{
			if (!soap_in_PointerTofw__entity(soap, tag, &n, "fw:entity"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<fw__entity * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofw__entity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTofw__entity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_std__vectorTemplateOfPointerTofw__entity, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<fw__entity * >);
		if (size)
			*size = sizeof(std::vector<fw__entity * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<fw__entity * >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<fw__entity * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<fw__entity * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofw__entity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<fw__entity * > %p -> %p\n", q, p));
	*(std::vector<fw__entity * >*)p = *(std::vector<fw__entity * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofw__ontologyKeyBind(struct soap *soap, std::vector<fw__ontologyKeyBind * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofw__ontologyKeyBind(struct soap *soap, const std::vector<fw__ontologyKeyBind * >*a)
{
	for (std::vector<fw__ontologyKeyBind * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTofw__ontologyKeyBind(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofw__ontologyKeyBind(struct soap *soap, const char *tag, int id, const std::vector<fw__ontologyKeyBind * >*a, const char *type)
{
	for (std::vector<fw__ontologyKeyBind * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTofw__ontologyKeyBind(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<fw__ontologyKeyBind * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofw__ontologyKeyBind(struct soap *soap, const char *tag, std::vector<fw__ontologyKeyBind * >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTofw__ontologyKeyBind(soap, -1)))
		return NULL;
	fw__ontologyKeyBind *n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cds_fw__ontologyKeyBind, SOAP_TYPE_cds_std__vectorTemplateOfPointerTofw__ontologyKeyBind, sizeof(fw__ontologyKeyBind), 1))
				break;
			if (!soap_in_PointerTofw__ontologyKeyBind(soap, tag, NULL, "fw:ontologyKeyBind"))
				break;
		}
		else
		{
			if (!soap_in_PointerTofw__ontologyKeyBind(soap, tag, &n, "fw:ontologyKeyBind"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<fw__ontologyKeyBind * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofw__ontologyKeyBind(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTofw__ontologyKeyBind(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_std__vectorTemplateOfPointerTofw__ontologyKeyBind, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<fw__ontologyKeyBind * >);
		if (size)
			*size = sizeof(std::vector<fw__ontologyKeyBind * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<fw__ontologyKeyBind * >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<fw__ontologyKeyBind * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<fw__ontologyKeyBind * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofw__ontologyKeyBind(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<fw__ontologyKeyBind * > %p -> %p\n", q, p));
	*(std::vector<fw__ontologyKeyBind * >*)p = *(std::vector<fw__ontologyKeyBind * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofw__entityData(struct soap *soap, std::vector<fw__entityData * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofw__entityData(struct soap *soap, const std::vector<fw__entityData * >*a)
{
	for (std::vector<fw__entityData * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTofw__entityData(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofw__entityData(struct soap *soap, const char *tag, int id, const std::vector<fw__entityData * >*a, const char *type)
{
	for (std::vector<fw__entityData * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTofw__entityData(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<fw__entityData * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofw__entityData(struct soap *soap, const char *tag, std::vector<fw__entityData * >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTofw__entityData(soap, -1)))
		return NULL;
	fw__entityData *n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_cds_fw__entityData, SOAP_TYPE_cds_std__vectorTemplateOfPointerTofw__entityData, sizeof(fw__entityData), 1))
				break;
			if (!soap_in_PointerTofw__entityData(soap, tag, NULL, "fw:entityData"))
				break;
		}
		else
		{
			if (!soap_in_PointerTofw__entityData(soap, tag, &n, "fw:entityData"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<fw__entityData * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofw__entityData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTofw__entityData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_cds_std__vectorTemplateOfPointerTofw__entityData, n, cds_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<fw__entityData * >);
		if (size)
			*size = sizeof(std::vector<fw__entityData * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<fw__entityData * >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<fw__entityData * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<fw__entityData * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofw__entityData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<fw__entityData * > %p -> %p\n", q, p));
	*(std::vector<fw__entityData * >*)p = *(std::vector<fw__entityData * >*)q;
}

} // namespace cds


#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of cdsC.cpp */
