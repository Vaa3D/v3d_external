/* cdsConsoleDataServiceProxy.h
   Generated by gSOAP 2.8.3 from cdsModHeader.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef cdsConsoleDataServiceProxy_H
#define cdsConsoleDataServiceProxy_H
#include "cdsH.h"

namespace cds {

class SOAP_CMAC ConsoleDataServiceProxy : public soap
{ public:
	/// Endpoint URL of service 'ConsoleDataServiceProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	ConsoleDataServiceProxy();
	/// Constructor with copy of another engine state
	ConsoleDataServiceProxy(const struct soap&);
	/// Constructor with endpoint URL
	ConsoleDataServiceProxy(const char *url);
	/// Constructor with engine input+output mode control
	ConsoleDataServiceProxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	ConsoleDataServiceProxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	ConsoleDataServiceProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~ConsoleDataServiceProxy();
	/// Initializer used by constructors
	virtual	void ConsoleDataServiceProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Force close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
	virtual	void soap_stream_fault(std::ostream&);
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'getEntityById' (returns error code or SOAP_OK)
	virtual	int getEntityById(LONG64 entityId, struct fw__getEntityByIdResponse &_param_1) { return getEntityById(NULL, NULL, entityId, _param_1); }
	virtual	int getEntityById(const char *endpoint, const char *soap_action, LONG64 entityId, struct fw__getEntityByIdResponse &_param_1);

	/// Web service operation 'removeAnnotation' (returns error code or SOAP_OK)
	virtual	int removeAnnotation(LONG64 annotationId, struct fw__removeAnnotationResponse &_param_2) { return removeAnnotation(NULL, NULL, annotationId, _param_2); }
	virtual	int removeAnnotation(const char *endpoint, const char *soap_action, LONG64 annotationId, struct fw__removeAnnotationResponse &_param_2);

	/// Web service operation 'getOntology' (returns error code or SOAP_OK)
	virtual	int getOntology(LONG64 rootId, struct fw__getOntologyResponse &_param_3) { return getOntology(NULL, NULL, rootId, _param_3); }
	virtual	int getOntology(const char *endpoint, const char *soap_action, LONG64 rootId, struct fw__getOntologyResponse &_param_3);

	/// Web service operation 'getAnnotationSession' (returns error code or SOAP_OK)
	virtual	int getAnnotationSession(LONG64 sessionId, struct fw__getAnnotationSessionResponse &_param_4) { return getAnnotationSession(NULL, NULL, sessionId, _param_4); }
	virtual	int getAnnotationSession(const char *endpoint, const char *soap_action, LONG64 sessionId, struct fw__getAnnotationSessionResponse &_param_4);

	/// Web service operation 'getEntityAndChildren' (returns error code or SOAP_OK)
	virtual	int getEntityAndChildren(LONG64 entityId, struct fw__getEntityAndChildrenResponse &_param_5) { return getEntityAndChildren(NULL, NULL, entityId, _param_5); }
	virtual	int getEntityAndChildren(const char *endpoint, const char *soap_action, LONG64 entityId, struct fw__getEntityAndChildrenResponse &_param_5);

	/// Web service operation 'getEntityTree' (returns error code or SOAP_OK)
	virtual	int getEntityTree(LONG64 entityId, struct fw__getEntityTreeResponse &_param_6) { return getEntityTree(NULL, NULL, entityId, _param_6); }
	virtual	int getEntityTree(const char *endpoint, const char *soap_action, LONG64 entityId, struct fw__getEntityTreeResponse &_param_6);

	/// Web service operation 'getAnnotationsForEntity' (returns error code or SOAP_OK)
	virtual	int getAnnotationsForEntity(LONG64 entityId, struct fw__getAnnotationsForEntityResponse &_param_7) { return getAnnotationsForEntity(NULL, NULL, entityId, _param_7); }
	virtual	int getAnnotationsForEntity(const char *endpoint, const char *soap_action, LONG64 entityId, struct fw__getAnnotationsForEntityResponse &_param_7);

	/// Web service operation 'getAnnotationsForEntities' (returns error code or SOAP_OK)
	virtual	int getAnnotationsForEntities(ns2__longArray *entityIds, struct fw__getAnnotationsForEntitiesResponse &_param_8) { return getAnnotationsForEntities(NULL, NULL, entityIds, _param_8); }
	virtual	int getAnnotationsForEntities(const char *endpoint, const char *soap_action, ns2__longArray *entityIds, struct fw__getAnnotationsForEntitiesResponse &_param_8);

	/// Web service operation 'getAncestorWithType' (returns error code or SOAP_OK)
	virtual	int getAncestorWithType(LONG64 _entityId, std::string _type, struct fw__getAncestorWithTypeResponse &_param_9) { return getAncestorWithType(NULL, NULL, _entityId, _type, _param_9); }
	virtual	int getAncestorWithType(const char *endpoint, const char *soap_action, LONG64 _entityId, std::string _type, struct fw__getAncestorWithTypeResponse &_param_9);

	/// Web service operation 'getUserAnnotationColor' (returns error code or SOAP_OK)
	virtual	int getUserAnnotationColor(std::string username, struct fw__getUserAnnotationColorResponse &_param_10) { return getUserAnnotationColor(NULL, NULL, username, _param_10); }
	virtual	int getUserAnnotationColor(const char *endpoint, const char *soap_action, std::string username, struct fw__getUserAnnotationColorResponse &_param_10);

	/// Web service operation 'selectEntity' (returns error code or SOAP_OK)
	virtual	int selectEntity(LONG64 _entityId, bool _clearAll, struct fw__selectEntityResponse &_param_11) { return selectEntity(NULL, NULL, _entityId, _clearAll, _param_11); }
	virtual	int selectEntity(const char *endpoint, const char *soap_action, LONG64 _entityId, bool _clearAll, struct fw__selectEntityResponse &_param_11);

	/// Web service operation 'deselectEntity' (returns error code or SOAP_OK)
	virtual	int deselectEntity(LONG64 entityId, struct fw__deselectEntityResponse &_param_12) { return deselectEntity(NULL, NULL, entityId, _param_12); }
	virtual	int deselectEntity(const char *endpoint, const char *soap_action, LONG64 entityId, struct fw__deselectEntityResponse &_param_12);

	/// Web service operation 'reservePort' (returns error code or SOAP_OK)
	virtual	int reservePort(std::string clientName, struct fw__reservePortResponse &_param_13) { return reservePort(NULL, NULL, clientName, _param_13); }
	virtual	int reservePort(const char *endpoint, const char *soap_action, std::string clientName, struct fw__reservePortResponse &_param_13);

	/// Web service operation 'registerClient' (returns error code or SOAP_OK)
	virtual	int registerClient(int _port, std::string _endpointUrl, struct fw__registerClientResponse &_param_14) { return registerClient(NULL, NULL, _port, _endpointUrl, _param_14); }
	virtual	int registerClient(const char *endpoint, const char *soap_action, int _port, std::string _endpointUrl, struct fw__registerClientResponse &_param_14);

	/// Web service operation 'createAnnotation' (returns error code or SOAP_OK)
	virtual	int createAnnotation(fw__ontologyAnnotation *annotation, struct fw__createAnnotationResponse &_param_15) { return createAnnotation(NULL, NULL, annotation, _param_15); }
	virtual	int createAnnotation(const char *endpoint, const char *soap_action, fw__ontologyAnnotation *annotation, struct fw__createAnnotationResponse &_param_15);

	/// Web service operation 'getKeybindings' (returns error code or SOAP_OK)
	virtual	int getKeybindings(LONG64 ontologyId, struct fw__getKeybindingsResponse &_param_16) { return getKeybindings(NULL, NULL, ontologyId, _param_16); }
	virtual	int getKeybindings(const char *endpoint, const char *soap_action, LONG64 ontologyId, struct fw__getKeybindingsResponse &_param_16);

	/// Web service operation 'getParentEntityArray' (returns error code or SOAP_OK)
	virtual	int getParentEntityArray(LONG64 childEntityId, struct fw__getParentEntityArrayResponse &_param_17) { return getParentEntityArray(NULL, NULL, childEntityId, _param_17); }
	virtual	int getParentEntityArray(const char *endpoint, const char *soap_action, LONG64 childEntityId, struct fw__getParentEntityArrayResponse &_param_17);

	/// Web service operation 'getParentEntityDataArray' (returns error code or SOAP_OK)
	virtual	int getParentEntityDataArray(LONG64 childEntityId, struct fw__getParentEntityDataArrayResponse &_param_18) { return getParentEntityDataArray(NULL, NULL, childEntityId, _param_18); }
	virtual	int getParentEntityDataArray(const char *endpoint, const char *soap_action, LONG64 childEntityId, struct fw__getParentEntityDataArrayResponse &_param_18);
};

} // namespace cds

#endif
