// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrappable_v3d.h"
#include "ImageWindow.pypp.hpp"

namespace bp = boost::python;

void register_ImageWindow_class(){

    { //::ImageWindow
        typedef bp::class_< ImageWindow > ImageWindow_exposer_t;
        ImageWindow_exposer_t ImageWindow_exposer = ImageWindow_exposer_t( "ImageWindow", "\n A primary TriView window in the V3D interface.\n", bp::init< std::string const & >(( bp::arg("name") ), "\n Creates a new V3D Image window.\n\n @param name: the name that appears in the title bar of the new window.\n") );
        bp::scope ImageWindow_scope( ImageWindow_exposer );
        bp::implicitly_convertible< std::string const &, ImageWindow >();
        { //::ImageWindow::close3DWindow
        
            typedef void ( ::ImageWindow::*close3DWindow_function_type )(  ) ;
            
            ImageWindow_exposer.def( 
                "close3DWindow"
                , close3DWindow_function_type( &::ImageWindow::close3DWindow ) );
        
        }
        { //::ImageWindow::closeROI3DWindow
        
            typedef void ( ::ImageWindow::*closeROI3DWindow_function_type )(  ) ;
            
            ImageWindow_exposer.def( 
                "closeROI3DWindow"
                , closeROI3DWindow_function_type( &::ImageWindow::closeROI3DWindow ) );
        
        }
        { //::ImageWindow::current
        
            typedef ::ImageWindow ( *current_function_type )(  );
            
            ImageWindow_exposer.def( 
                "current"
                , current_function_type( &::ImageWindow::current )
                , "\n Returns the currently displayed V3D image window.\n" );
        
        }
        { //::ImageWindow::currentHiddenSelected
        
            typedef ::ImageWindow ( *currentHiddenSelected_function_type )(  );
            
            ImageWindow_exposer.def( 
                "currentHiddenSelected"
                , currentHiddenSelected_function_type( &::ImageWindow::currentHiddenSelected ) );
        
        }
        { //::ImageWindow::getImage
        
            typedef ::Image4DSimple * ( ::ImageWindow::*getImage_function_type )(  ) ;
            
            ImageWindow_exposer.def( 
                "getImage"
                , getImage_function_type( &::ImageWindow::getImage )
                , bp::return_internal_reference< >() );
        
        }
        { //::ImageWindow::getLandmark
        
            typedef ::LandmarkList ( ::ImageWindow::*getLandmark_function_type )(  ) ;
            
            ImageWindow_exposer.def( 
                "getLandmark"
                , getLandmark_function_type( &::ImageWindow::getLandmark ) );
        
        }
        { //::ImageWindow::getLocalView3DControl
        
            typedef ::View3DControl * ( ::ImageWindow::*getLocalView3DControl_function_type )(  ) ;
            
            ImageWindow_exposer.def( 
                "getLocalView3DControl"
                , getLocalView3DControl_function_type( &::ImageWindow::getLocalView3DControl )
                , bp::return_internal_reference< >() );
        
        }
        { //::ImageWindow::getName
        
            typedef ::std::string ( ::ImageWindow::*getName_function_type )(  ) const;
            
            ImageWindow_exposer.def( 
                "getName"
                , getName_function_type( &::ImageWindow::getName ) );
        
        }
        { //::ImageWindow::getROI
        
            typedef ::ROIList ( ::ImageWindow::*getROI_function_type )(  ) ;
            
            ImageWindow_exposer.def( 
                "getROI"
                , getROI_function_type( &::ImageWindow::getROI ) );
        
        }
        { //::ImageWindow::getSWC
        
            typedef ::NeuronTree ( ::ImageWindow::*getSWC_function_type )(  ) ;
            
            ImageWindow_exposer.def( 
                "getSWC"
                , getSWC_function_type( &::ImageWindow::getSWC ) );
        
        }
        { //::ImageWindow::getTriviewControl
        
            typedef ::TriviewControl * ( ::ImageWindow::*getTriviewControl_function_type )(  ) ;
            
            ImageWindow_exposer.def( 
                "getTriviewControl"
                , getTriviewControl_function_type( &::ImageWindow::getTriviewControl )
                , bp::return_internal_reference< >() );
        
        }
        { //::ImageWindow::getView3DControl
        
            typedef ::View3DControl * ( ::ImageWindow::*getView3DControl_function_type )(  ) ;
            
            ImageWindow_exposer.def( 
                "getView3DControl"
                , getView3DControl_function_type( &::ImageWindow::getView3DControl )
                , bp::return_internal_reference< >()
                , "\n Returns a View3DControl object, used to manipulate the 3D\n volume window.\n" );
        
        }
        { //::ImageWindow::open3DWindow
        
            typedef void ( ::ImageWindow::*open3DWindow_function_type )(  ) ;
            
            ImageWindow_exposer.def( 
                "open3DWindow"
                , open3DWindow_function_type( &::ImageWindow::open3DWindow )
                , "\n Creates or opens a 3D volume visualization window showing the\n same image as this ImageWindow.\n" );
        
        }
        { //::ImageWindow::openROI3DWindow
        
            typedef void ( ::ImageWindow::*openROI3DWindow_function_type )(  ) ;
            
            ImageWindow_exposer.def( 
                "openROI3DWindow"
                , openROI3DWindow_function_type( &::ImageWindow::openROI3DWindow ) );
        
        }
        { //::ImageWindow::pushImageIn3DWindow
        
            typedef void ( ::ImageWindow::*pushImageIn3DWindow_function_type )(  ) ;
            
            ImageWindow_exposer.def( 
                "pushImageIn3DWindow"
                , pushImageIn3DWindow_function_type( &::ImageWindow::pushImageIn3DWindow ) );
        
        }
        { //::ImageWindow::pushObjectIn3DWindow
        
            typedef void ( ::ImageWindow::*pushObjectIn3DWindow_function_type )(  ) ;
            
            ImageWindow_exposer.def( 
                "pushObjectIn3DWindow"
                , pushObjectIn3DWindow_function_type( &::ImageWindow::pushObjectIn3DWindow ) );
        
        }
        { //::ImageWindow::pushTimepointIn3DWindow
        
            typedef int ( ::ImageWindow::*pushTimepointIn3DWindow_function_type )( int ) ;
            
            ImageWindow_exposer.def( 
                "pushTimepointIn3DWindow"
                , pushTimepointIn3DWindow_function_type( &::ImageWindow::pushTimepointIn3DWindow )
                , ( bp::arg("timepoint") ) );
        
        }
        { //::ImageWindow::screenShot3DWindow
        
            typedef bool ( ::ImageWindow::*screenShot3DWindow_function_type )( ::std::string const & ) ;
            
            ImageWindow_exposer.def( 
                "screenShot3DWindow"
                , screenShot3DWindow_function_type( &::ImageWindow::screenShot3DWindow )
                , ( bp::arg("BMPfilename") ) );
        
        }
        { //::ImageWindow::screenShotROI3DWindow
        
            typedef bool ( ::ImageWindow::*screenShotROI3DWindow_function_type )( ::std::string const & ) ;
            
            ImageWindow_exposer.def( 
                "screenShotROI3DWindow"
                , screenShotROI3DWindow_function_type( &::ImageWindow::screenShotROI3DWindow )
                , ( bp::arg("BMPfilename") ) );
        
        }
        { //::ImageWindow::setImage
        
            typedef bool ( ::ImageWindow::*setImage_function_type )( ::Image4DSimple * ) ;
            
            ImageWindow_exposer.def( 
                "setImage"
                , setImage_function_type( &::ImageWindow::setImage )
                , ( bp::arg("image") )
                , bp::with_custodian_and_ward< 1, 2 >() );
        
        }
        { //::ImageWindow::setLandmark
        
            typedef bool ( ::ImageWindow::*setLandmark_function_type )( ::LandmarkList & ) ;
            
            ImageWindow_exposer.def( 
                "setLandmark"
                , setLandmark_function_type( &::ImageWindow::setLandmark )
                , ( bp::arg("landmark_list") ) );
        
        }
        { //::ImageWindow::setName
        
            typedef void ( ::ImageWindow::*setName_function_type )( ::std::string const & ) ;
            
            ImageWindow_exposer.def( 
                "setName"
                , setName_function_type( &::ImageWindow::setName )
                , ( bp::arg("name") ) );
        
        }
        { //::ImageWindow::setROI
        
            typedef bool ( ::ImageWindow::*setROI_function_type )( ::ROIList & ) ;
            
            ImageWindow_exposer.def( 
                "setROI"
                , setROI_function_type( &::ImageWindow::setROI )
                , ( bp::arg("roi_list") ) );
        
        }
        { //::ImageWindow::setSWC
        
            typedef bool ( ::ImageWindow::*setSWC_function_type )( ::NeuronTree & ) ;
            
            ImageWindow_exposer.def( 
                "setSWC"
                , setSWC_function_type( &::ImageWindow::setSWC )
                , ( bp::arg("nt") ) );
        
        }
        { //::ImageWindow::update
        
            typedef void ( ::ImageWindow::*update_function_type )(  ) ;
            
            ImageWindow_exposer.def( 
                "update"
                , update_function_type( &::ImageWindow::update ) );
        
        }
        ImageWindow_exposer.staticmethod( "current" );
        ImageWindow_exposer.staticmethod( "currentHiddenSelected" );
        { //property "image"[fget=::ImageWindow::getImage, fset=::ImageWindow::setImage]
        
            typedef ::Image4DSimple * ( ::ImageWindow::*fget )(  ) ;
            typedef bool ( ::ImageWindow::*fset )( ::Image4DSimple * ) ;
            
            ImageWindow_exposer.add_property( 
                "image"
                , bp::make_function( 
                      fget( &::ImageWindow::getImage )
                    , bp::return_internal_reference< >() ) 
                , bp::make_function( 
                      fset( &::ImageWindow::setImage )
                    , bp::with_custodian_and_ward< 1, 2 >() )  );
        
        }
        { //property "name"[fget=::ImageWindow::getName, fset=::ImageWindow::setName]
        
            typedef ::std::string ( ::ImageWindow::*fget )(  ) const;
            typedef void ( ::ImageWindow::*fset )( ::std::string const & ) ;
            
            ImageWindow_exposer.add_property( 
                "name"
                , fget( &::ImageWindow::getName )
                , fset( &::ImageWindow::setName ) );
        
        }
        { //property "view3DControl"[fget=::ImageWindow::getView3DControl]
        
            typedef ::View3DControl * ( ::ImageWindow::*fget )(  ) ;
            
            ImageWindow_exposer.add_property( 
                "view3DControl"
                , bp::make_function( 
                      fget( &::ImageWindow::getView3DControl )
                    , bp::return_internal_reference< >() )  );
        
        }
        { //property "localView3DControl"[fget=::ImageWindow::getLocalView3DControl]
        
            typedef ::View3DControl * ( ::ImageWindow::*fget )(  ) ;
            
            ImageWindow_exposer.add_property( 
                "localView3DControl"
                , bp::make_function( 
                      fget( &::ImageWindow::getLocalView3DControl )
                    , bp::return_internal_reference< >() )  );
        
        }
        { //property "triViewControl"[fget=::ImageWindow::getTriviewControl]
        
            typedef ::TriviewControl * ( ::ImageWindow::*fget )(  ) ;
            
            ImageWindow_exposer.add_property( 
                "triViewControl"
                , bp::make_function( 
                      fget( &::ImageWindow::getTriviewControl )
                    , bp::return_internal_reference< >() )  );
        
        }
    }

}
