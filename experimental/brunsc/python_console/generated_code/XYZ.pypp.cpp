// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrappable_v3d.h"
#include "XYZ.pypp.hpp"

namespace bp = boost::python;

void register_XYZ_class(){

    { //::XYZ
        typedef bp::class_< XYZ > XYZ_exposer_t;
        XYZ_exposer_t XYZ_exposer = XYZ_exposer_t( "XYZ", bp::init< float, float, float >(( bp::arg("px"), bp::arg("py"), bp::arg("pz") )) );
        bp::scope XYZ_scope( XYZ_exposer );
        XYZ_exposer.def_readwrite( "x", &XYZ::x );
        XYZ_exposer.def_readwrite( "y", &XYZ::y );
        XYZ_exposer.def_readwrite( "z", &XYZ::z );
        XYZ_exposer.def_readwrite( "v", &XYZ::v );
        XYZ_exposer.def( bp::init< bp::optional< float > >(( bp::arg("a")=0 )) );
        bp::implicitly_convertible< float, XYZ >();
        XYZ_exposer.def( bp::init< RGB8 >(( bp::arg("c") )) );
        bp::implicitly_convertible< RGB8, XYZ >();
        XYZ_exposer.def( bp::init< RGB16i >(( bp::arg("c") )) );
        bp::implicitly_convertible< RGB16i, XYZ >();
        XYZ_exposer.def( bp::init< RGB32i >(( bp::arg("c") )) );
        bp::implicitly_convertible< RGB32i, XYZ >();
        XYZ_exposer.def( bp::init< RGB32f >(( bp::arg("c") )) );
        bp::implicitly_convertible< RGB32f, XYZ >();
    }

}
