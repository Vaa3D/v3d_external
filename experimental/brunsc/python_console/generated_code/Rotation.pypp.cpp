// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrappable_v3d.h"
#include "Rotation.pypp.hpp"

namespace bp = boost::python;

void register_Rotation_class(){

    { //::SimTK::Rotation_< double >
        typedef bp::class_< SimTK::Rotation_< double > > Rotation_exposer_t;
        Rotation_exposer_t Rotation_exposer = Rotation_exposer_t( "Rotation" );
        bp::scope Rotation_scope( Rotation_exposer );
        { //::SimTK::Rotation_< double >::convertThreeAxesRotationToThreeAngles
        
            typedef SimTK::Rotation_< double > exported_class_t;
            typedef ::SimTK::Vec< 3, double, 1 > ( exported_class_t::*convertThreeAxesRotationToThreeAngles_function_type )( ::SimTK::BodyOrSpaceType,::SimTK::CoordinateAxis const &,::SimTK::CoordinateAxis const &,::SimTK::CoordinateAxis const & ) const;
            
            Rotation_exposer.def( 
                "convertThreeAxesRotationToThreeAngles"
                , convertThreeAxesRotationToThreeAngles_function_type( &::SimTK::Rotation_< double >::convertThreeAxesRotationToThreeAngles )
                , ( bp::arg("bodyOrSpace"), bp::arg("axis1"), bp::arg("axis2"), bp::arg("axis3") )
                , " Converts rotation matrix to three orientation angles.\n Note:  The result is most meaningful if the Rotation_ matrix is one that can be produced by such a sequence." );
        
        }
        { //::SimTK::Rotation_< double >::setRotationFromQuaternion
        
            typedef SimTK::Rotation_< double > exported_class_t;
            typedef ::SimTK::Rotation_< double > & ( exported_class_t::*setRotationFromQuaternion_function_type )( ::SimTK::Quaternion_< double > const & ) ;
            
            Rotation_exposer.def( 
                "setRotationFromQuaternion"
                , setRotationFromQuaternion_function_type( &::SimTK::Rotation_< double >::setRotationFromQuaternion )
                , ( bp::arg("q") )
                , bp::return_internal_reference< >()
                , " Method for creating a rotation matrix from a quaternion." );
        
        }
        { //::SimTK::Rotation_< double >::setRotationFromThreeAnglesThreeAxes
        
            typedef SimTK::Rotation_< double > exported_class_t;
            typedef ::SimTK::Rotation_< double > & ( exported_class_t::*setRotationFromThreeAnglesThreeAxes_function_type )( ::SimTK::BodyOrSpaceType,double,::SimTK::CoordinateAxis const &,double,::SimTK::CoordinateAxis const &,double,::SimTK::CoordinateAxis const & ) ;
            
            Rotation_exposer.def( 
                "setRotationFromThreeAnglesThreeAxes"
                , setRotationFromThreeAnglesThreeAxes_function_type( &::SimTK::Rotation_< double >::setRotationFromThreeAnglesThreeAxes )
                , ( bp::arg("bodyOrSpace"), bp::arg("angle1"), bp::arg("axis1"), bp::arg("angle2"), bp::arg("axis2"), bp::arg("angle3"), bp::arg("axis3") )
                , bp::return_internal_reference< >()
                , " Set this Rotation_ object to a three-angle Body-fixed or Space-fixed rotation sequences (angles are in radians)" );
        
        }
    }

}
